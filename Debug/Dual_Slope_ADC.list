
Dual_Slope_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006640  08006640  00016640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080068f8  080068f8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068f8  080068f8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001dc  08006adc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006adc  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc09  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a7b  00000000  00000000  0002ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148f5  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000937c  00000000  00000000  00044c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074368  00000000  00000000  0004e019  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  000c23fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006624 	.word	0x08006624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006624 	.word	0x08006624

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f945 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f003 f870 	bl	8004044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f95d 	bl	800124e <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f925 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	2000020c 	.word	0x2000020c

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	2000020c 	.word	0x2000020c

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_Delay+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000004 	.word	0x20000004

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <__NVIC_EnableIRQ+0x34>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff90 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff2d 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff42 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff35 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e127      	b.n	80014cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800127c:	2201      	movs	r2, #1
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8116 	bne.w	80014c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d034      	beq.n	800130c <HAL_GPIO_Init+0xa4>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d80d      	bhi.n	80012c2 <HAL_GPIO_Init+0x5a>
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x9a>
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d804      	bhi.n	80012b8 <HAL_GPIO_Init+0x50>
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d031      	beq.n	8001316 <HAL_GPIO_Init+0xae>
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d01c      	beq.n	80012f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b6:	e048      	b.n	800134a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d043      	beq.n	8001344 <HAL_GPIO_Init+0xdc>
 80012bc:	2b11      	cmp	r3, #17
 80012be:	d01b      	beq.n	80012f8 <HAL_GPIO_Init+0x90>
          break;
 80012c0:	e043      	b.n	800134a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c2:	4a89      	ldr	r2, [pc, #548]	; (80014e8 <HAL_GPIO_Init+0x280>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d026      	beq.n	8001316 <HAL_GPIO_Init+0xae>
 80012c8:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <HAL_GPIO_Init+0x280>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d806      	bhi.n	80012dc <HAL_GPIO_Init+0x74>
 80012ce:	4a87      	ldr	r2, [pc, #540]	; (80014ec <HAL_GPIO_Init+0x284>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d020      	beq.n	8001316 <HAL_GPIO_Init+0xae>
 80012d4:	4a86      	ldr	r2, [pc, #536]	; (80014f0 <HAL_GPIO_Init+0x288>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01d      	beq.n	8001316 <HAL_GPIO_Init+0xae>
          break;
 80012da:	e036      	b.n	800134a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012dc:	4a85      	ldr	r2, [pc, #532]	; (80014f4 <HAL_GPIO_Init+0x28c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0xae>
 80012e2:	4a85      	ldr	r2, [pc, #532]	; (80014f8 <HAL_GPIO_Init+0x290>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d016      	beq.n	8001316 <HAL_GPIO_Init+0xae>
 80012e8:	4a84      	ldr	r2, [pc, #528]	; (80014fc <HAL_GPIO_Init+0x294>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0xae>
          break;
 80012ee:	e02c      	b.n	800134a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e028      	b.n	800134a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e023      	b.n	800134a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	3308      	adds	r3, #8
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e01e      	b.n	800134a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	330c      	adds	r3, #12
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e019      	b.n	800134a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131e:	2304      	movs	r3, #4
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e012      	b.n	800134a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	611a      	str	r2, [r3, #16]
          break;
 8001336:	e008      	b.n	800134a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	615a      	str	r2, [r3, #20]
          break;
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2bff      	cmp	r3, #255	; 0xff
 800134e:	d801      	bhi.n	8001354 <HAL_GPIO_Init+0xec>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e001      	b.n	8001358 <HAL_GPIO_Init+0xf0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3304      	adds	r3, #4
 8001358:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2bff      	cmp	r3, #255	; 0xff
 800135e:	d802      	bhi.n	8001366 <HAL_GPIO_Init+0xfe>
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x104>
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3b08      	subs	r3, #8
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	210f      	movs	r1, #15
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	401a      	ands	r2, r3
 800137e:	6a39      	ldr	r1, [r7, #32]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8096 	beq.w	80014c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	4b59      	ldr	r3, [pc, #356]	; (8001500 <HAL_GPIO_Init+0x298>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <HAL_GPIO_Init+0x298>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <HAL_GPIO_Init+0x298>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b2:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x29c>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x2a0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x19e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x2a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x19a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a49      	ldr	r2, [pc, #292]	; (8001510 <HAL_GPIO_Init+0x2a8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x196>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_GPIO_Init+0x2ac>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x192>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x1a0>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x1a0>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x1a0>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x1a0>
 8001406:	2300      	movs	r3, #0
 8001408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001418:	493a      	ldr	r1, [pc, #232]	; (8001504 <HAL_GPIO_Init+0x29c>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4938      	ldr	r1, [pc, #224]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
 800143e:	e006      	b.n	800144e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001440:	4b35      	ldr	r3, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	4933      	ldr	r1, [pc, #204]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 800144a:	4013      	ands	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	492e      	ldr	r1, [pc, #184]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	4929      	ldr	r1, [pc, #164]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001472:	4013      	ands	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4924      	ldr	r1, [pc, #144]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	43db      	mvns	r3, r3
 8001498:	491f      	ldr	r1, [pc, #124]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 800149a:	4013      	ands	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	491a      	ldr	r1, [pc, #104]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60cb      	str	r3, [r1, #12]
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4915      	ldr	r1, [pc, #84]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f aed0 	bne.w	800127c <HAL_GPIO_Init+0x14>
  }
}
 80014dc:	bf00      	nop
 80014de:	372c      	adds	r7, #44	; 0x2c
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	10210000 	.word	0x10210000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	10120000 	.word	0x10120000
 80014f4:	10310000 	.word	0x10310000
 80014f8:	10320000 	.word	0x10320000
 80014fc:	10220000 	.word	0x10220000
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	40010800 	.word	0x40010800
 800150c:	40010c00 	.word	0x40010c00
 8001510:	40011000 	.word	0x40011000
 8001514:	40011400 	.word	0x40011400
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	611a      	str	r2, [r3, #16]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001564:	887a      	ldrh	r2, [r7, #2]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800156a:	e002      	b.n	8001572 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e10f      	b.n	80017ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f002 fd80 	bl	80040a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c0:	f000 fcda 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <HAL_I2C_Init+0x23c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d807      	bhi.n	80015e0 <HAL_I2C_Init+0x64>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_I2C_Init+0x240>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e006      	b.n	80015ee <HAL_I2C_Init+0x72>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_I2C_Init+0x244>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0db      	b.n	80017ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a72      	ldr	r2, [pc, #456]	; (80017c4 <HAL_I2C_Init+0x248>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <HAL_I2C_Init+0x23c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d802      	bhi.n	8001630 <HAL_I2C_Init+0xb4>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	e009      	b.n	8001644 <HAL_I2C_Init+0xc8>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_I2C_Init+0x24c>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	3301      	adds	r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4956      	ldr	r1, [pc, #344]	; (80017b8 <HAL_I2C_Init+0x23c>)
 8001660:	428b      	cmp	r3, r1
 8001662:	d80d      	bhi.n	8001680 <HAL_I2C_Init+0x104>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e59      	subs	r1, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf38      	it	cc
 800167c:	2304      	movcc	r3, #4
 800167e:	e04f      	b.n	8001720 <HAL_I2C_Init+0x1a4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <HAL_I2C_Init+0x130>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e012      	b.n	80016d2 <HAL_I2C_Init+0x156>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x15e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e022      	b.n	8001720 <HAL_I2C_Init+0x1a4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_I2C_Init+0x184>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e58      	subs	r0, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	440b      	add	r3, r1
 80016f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	e00f      	b.n	8001720 <HAL_I2C_Init+0x1a4>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6911      	ldr	r1, [r2, #16]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	430b      	orrs	r3, r1
 8001762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000186a0 	.word	0x000186a0
 80017bc:	001e847f 	.word	0x001e847f
 80017c0:	003d08ff 	.word	0x003d08ff
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	10624dd3 	.word	0x10624dd3

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e26c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8087 	beq.w	80018fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ec:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d00c      	beq.n	8001812 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f8:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d112      	bne.n	800182a <HAL_RCC_OscConfig+0x5e>
 8001804:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d10b      	bne.n	800182a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x12c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d168      	bne.n	80018f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e246      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x76>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a7f      	ldr	r2, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e02e      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x98>
 800184a:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a7a      	ldr	r2, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0xbc>
 800186e:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a71      	ldr	r2, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001888:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6a      	ldr	r2, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fba4 	bl	8000ff4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fba0 	bl	8000ff4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1fa      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe4>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb90 	bl	8000ff4 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fb8c 	bl	8000ff4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1e6      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x10c>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d063      	beq.n	80019ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d11c      	bne.n	8001958 <HAL_RCC_OscConfig+0x18c>
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_RCC_OscConfig+0x176>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1ba      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4939      	ldr	r1, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	e03a      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fb45 	bl	8000ff4 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fb41 	bl	8000ff4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e19b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb24 	bl	8000ff4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fb20 	bl	8000ff4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e17a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03a      	beq.n	8001a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x274>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fb04 	bl	8000ff4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fb00 	bl	8000ff4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e15a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f000 fada 	bl	8001fc8 <RCC_Delay>
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff faea 	bl	8000ff4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	e00f      	b.n	8001a44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fae6 	bl	8000ff4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d908      	bls.n	8001a44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e140      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	42420000 	.word	0x42420000
 8001a40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e9      	bne.n	8001a24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a6 	beq.w	8001baa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b97      	ldr	r3, [pc, #604]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a93      	ldr	r2, [pc, #588]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b91      	ldr	r3, [pc, #580]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b8e      	ldr	r3, [pc, #568]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a8a      	ldr	r2, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff faa7 	bl	8000ff4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff faa3 	bl	8000ff4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e0fd      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x312>
 8001ad0:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x334>
 8001ae6:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a75      	ldr	r2, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a72      	ldr	r2, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	e01c      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x356>
 8001b08:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a6c      	ldr	r2, [pc, #432]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d015      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fa57 	bl	8000ff4 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fa53 	bl	8000ff4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0ab      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCC_OscConfig+0x37e>
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa41 	bl	8000ff4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fa3d 	bl	8000ff4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e095      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ee      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8081 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb4:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d061      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d146      	bne.n	8001c56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x4fc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa11 	bl	8000ff4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff fa0d 	bl	8000ff4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e067      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	492d      	ldr	r1, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a19      	ldr	r1, [r3, #32]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	430b      	orrs	r3, r1
 8001c22:	4927      	ldr	r1, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x4fc>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f9e1 	bl	8000ff4 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f9dd 	bl	8000ff4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e037      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46a>
 8001c54:	e02f      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_RCC_OscConfig+0x4fc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f9ca 	bl	8000ff4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f9c6 	bl	8000ff4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e020      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x498>
 8001c82:	e018      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e013      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42420060 	.word	0x42420060

08001ccc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0d0      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4965      	ldr	r1, [pc, #404]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0b8      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	494d      	ldr	r1, [pc, #308]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d040      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d115      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e073      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06b      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4936      	ldr	r1, [pc, #216]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f91a 	bl	8000ff4 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff f916 	bl	8000ff4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e053      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d210      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4922      	ldr	r1, [pc, #136]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e032      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4916      	ldr	r1, [pc, #88]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5a:	f000 f821 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4601      	mov	r1, r0
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1cc>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f878 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08006680 	.word	0x08006680
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b490      	push	{r4, r7}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea8:	1d3c      	adds	r4, r7, #4
 8001eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ede:	e02d      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee2:	623b      	str	r3, [r7, #32]
      break;
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ef8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0c5b      	lsrs	r3, r3, #17
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f12:	4413      	add	r3, r2
 8001f14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f1e:	fb02 f203 	mul.w	r2, r2, r3
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	e004      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	623b      	str	r3, [r7, #32]
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3e:	623b      	str	r3, [r7, #32]
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc90      	pop	{r4, r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	08006640 	.word	0x08006640
 8001f54:	08006650 	.word	0x08006650
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	003d0900 	.word	0x003d0900

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20000008 	.word	0x20000008

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff2 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08006690 	.word	0x08006690

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4601      	mov	r1, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08006690 	.word	0x08006690

08001fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <RCC_Delay+0x34>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <RCC_Delay+0x38>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0a5b      	lsrs	r3, r3, #9
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe4:	bf00      	nop
  }
  while (Delay --);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	60fa      	str	r2, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <RCC_Delay+0x1c>
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000008 	.word	0x20000008
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e01d      	b.n	8002052 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f002 f88c 	bl	8004148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 fd58 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d007      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e01d      	b.n	80020ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f815 	bl	80020f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fd0a 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f8ff 	bl	800331e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_TIM_PWM_Start+0x60>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d107      	bne.n	800213a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d007      	beq.n	800215c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40012c00 	.word	0x40012c00

0800216c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e01d      	b.n	80021ba <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f002 f82a 	bl	80041ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 fca4 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d841      	bhi.n	8002258 <HAL_TIM_IC_Start_IT+0x94>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_TIM_IC_Start_IT+0x18>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002259 	.word	0x08002259
 80021e4:	08002259 	.word	0x08002259
 80021e8:	08002259 	.word	0x08002259
 80021ec:	08002223 	.word	0x08002223
 80021f0:	08002259 	.word	0x08002259
 80021f4:	08002259 	.word	0x08002259
 80021f8:	08002259 	.word	0x08002259
 80021fc:	08002235 	.word	0x08002235
 8002200:	08002259 	.word	0x08002259
 8002204:	08002259 	.word	0x08002259
 8002208:	08002259 	.word	0x08002259
 800220c:	08002247 	.word	0x08002247
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0202 	orr.w	r2, r2, #2
 800221e:	60da      	str	r2, [r3, #12]
      break;
 8002220:	e01b      	b.n	800225a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0204 	orr.w	r2, r2, #4
 8002230:	60da      	str	r2, [r3, #12]
      break;
 8002232:	e012      	b.n	800225a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	60da      	str	r2, [r3, #12]
      break;
 8002244:	e009      	b.n	800225a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0210 	orr.w	r2, r2, #16
 8002254:	60da      	str	r2, [r3, #12]
      break;
 8002256:	e000      	b.n	800225a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002258:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f001 f85b 	bl	800331e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b06      	cmp	r3, #6
 8002278:	d007      	beq.n	800228a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e02d      	b.n	8002304 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f825 	bl	800230c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 fc0f 	bl	8002af8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0208 	bic.w	r2, r2, #8
 80022e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fff3 	bl	800331e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	2104      	movs	r1, #4
 8002340:	4618      	mov	r0, r3
 8002342:	f000 ffec 	bl	800331e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_TIM_OnePulse_Start+0x4c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d107      	bne.n	8002360 <HAL_TIM_OnePulse_Start+0x40>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0202 	mvn.w	r2, #2
 800239c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f001 faec 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fb80 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb86 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0204 	mvn.w	r2, #4
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f001 fac2 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fb56 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fb5c 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0208 	mvn.w	r2, #8
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2204      	movs	r2, #4
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fa98 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fb2c 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fb32 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b10      	cmp	r3, #16
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0210 	mvn.w	r2, #16
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2208      	movs	r2, #8
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f001 fa6e 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fb02 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fb08 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0201 	mvn.w	r2, #1
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f001 fa5a 	bl	80039a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ffc1 	bl	80034a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 facc 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b20      	cmp	r3, #32
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0220 	mvn.w	r2, #32
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 ff8c 	bl	8003490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002596:	2302      	movs	r3, #2
 8002598:	e08a      	b.n	80026b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f000 fd0a 	bl	8002fd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 020c 	bic.w	r2, r2, #12
 80025d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6999      	ldr	r1, [r3, #24]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	619a      	str	r2, [r3, #24]
 80025e6:	e05a      	b.n	800269e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d11c      	bne.n	8002628 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 fd73 	bl	80030e8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002610:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6999      	ldr	r1, [r3, #24]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e03a      	b.n	800269e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11b      	bne.n	8002666 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f000 fdbe 	bl	80031be <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 020c 	bic.w	r2, r2, #12
 8002650:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69d9      	ldr	r1, [r3, #28]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	61da      	str	r2, [r3, #28]
 8002664:	e01b      	b.n	800269e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f000 fddd 	bl	8003234 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002688:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e0b4      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x184>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f200 809f 	bhi.w	8002828 <HAL_TIM_PWM_ConfigChannel+0x170>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002725 	.word	0x08002725
 80026f4:	08002829 	.word	0x08002829
 80026f8:	08002829 	.word	0x08002829
 80026fc:	08002829 	.word	0x08002829
 8002700:	08002765 	.word	0x08002765
 8002704:	08002829 	.word	0x08002829
 8002708:	08002829 	.word	0x08002829
 800270c:	08002829 	.word	0x08002829
 8002710:	080027a7 	.word	0x080027a7
 8002714:	08002829 	.word	0x08002829
 8002718:	08002829 	.word	0x08002829
 800271c:	08002829 	.word	0x08002829
 8002720:	080027e7 	.word	0x080027e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fa46 	bl	8002bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      break;
 8002762:	e062      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa8c 	bl	8002c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      break;
 80027a4:	e041      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fad5 	bl	8002d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0208 	orr.w	r2, r2, #8
 80027c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
      break;
 80027e4:	e021      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fb1f 	bl	8002e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
      break;
 8002826:	e000      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002828:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIM_ConfigClockSource+0x18>
 8002858:	2302      	movs	r3, #2
 800285a:	e0a6      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x166>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800287a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002882:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d067      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x120>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d80b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x6c>
 8002898:	2b10      	cmp	r3, #16
 800289a:	d073      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0x140>
 800289c:	2b10      	cmp	r3, #16
 800289e:	d802      	bhi.n	80028a6 <HAL_TIM_ConfigClockSource+0x62>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06f      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80028a4:	e078      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d06c      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0x140>
 80028aa:	2b30      	cmp	r3, #48	; 0x30
 80028ac:	d06a      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028ae:	e073      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d00d      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x8c>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d804      	bhi.n	80028c2 <HAL_TIM_ConfigClockSource+0x7e>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d033      	beq.n	8002924 <HAL_TIM_ConfigClockSource+0xe0>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d041      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028c0:	e06a      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d066      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x152>
 80028c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028cc:	d017      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028ce:	e063      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f000 fcfe 	bl	80032e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
      break;
 80028fc:	e04c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f000 fce7 	bl	80032e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002920:	609a      	str	r2, [r3, #8]
      break;
 8002922:	e039      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	461a      	mov	r2, r3
 8002932:	f000 fbab 	bl	800308c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2150      	movs	r1, #80	; 0x50
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fcb5 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8002942:	e029      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	f000 fc05 	bl	8003160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2160      	movs	r1, #96	; 0x60
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fca5 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8002962:	e019      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	461a      	mov	r2, r3
 8002972:	f000 fb8b 	bl	800308c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc95 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8002982:	e009      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fc8c 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e031      	b.n	8002a2e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa75 	bl	8002ecc <TIM_SlaveTimer_SetConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d009      	beq.n	80029fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e018      	b.n	8002a2e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a1a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d831      	bhi.n	8002ab0 <HAL_TIM_ReadCapturedValue+0x78>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a89 	.word	0x08002a89
 8002a58:	08002ab1 	.word	0x08002ab1
 8002a5c:	08002ab1 	.word	0x08002ab1
 8002a60:	08002ab1 	.word	0x08002ab1
 8002a64:	08002a93 	.word	0x08002a93
 8002a68:	08002ab1 	.word	0x08002ab1
 8002a6c:	08002ab1 	.word	0x08002ab1
 8002a70:	08002ab1 	.word	0x08002ab1
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002ab1 	.word	0x08002ab1
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ab1 	.word	0x08002ab1
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	60fb      	str	r3, [r7, #12]

      break;
 8002a90:	e00f      	b.n	8002ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	60fb      	str	r3, [r7, #12]

      break;
 8002a9a:	e00a      	b.n	8002ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	60fb      	str	r3, [r7, #12]

      break;
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	60fb      	str	r3, [r7, #12]

      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002ab0:	bf00      	nop
  }

  return tmpreg;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <TIM_Base_SetConfig+0xbc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00b      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d007      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <TIM_Base_SetConfig+0xbc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800

08002bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 0302 	bic.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <TIM_OC1_SetConfig+0xc8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10c      	bne.n	8002c32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0308 	bic.w	r3, r3, #8
 8002c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <TIM_OC1_SetConfig+0xc8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0320 	bic.w	r3, r3, #32
 8002cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <TIM_OC2_SetConfig+0xd0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10d      	bne.n	8002d04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <TIM_OC2_SetConfig+0xd0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d113      	bne.n	8002d34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00

08002d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0303 	bic.w	r3, r3, #3
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <TIM_OC3_SetConfig+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <TIM_OC3_SetConfig+0xd0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d113      	bne.n	8002e06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	031b      	lsls	r3, r3, #12
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <TIM_OC4_SetConfig+0x98>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d109      	bne.n	8002ea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b30      	cmp	r3, #48	; 0x30
 8002f10:	d05c      	beq.n	8002fcc <TIM_SlaveTimer_SetConfig+0x100>
 8002f12:	2b30      	cmp	r3, #48	; 0x30
 8002f14:	d806      	bhi.n	8002f24 <TIM_SlaveTimer_SetConfig+0x58>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d058      	beq.n	8002fcc <TIM_SlaveTimer_SetConfig+0x100>
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d056      	beq.n	8002fcc <TIM_SlaveTimer_SetConfig+0x100>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d054      	beq.n	8002fcc <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002f22:	e054      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002f24:	2b50      	cmp	r3, #80	; 0x50
 8002f26:	d03d      	beq.n	8002fa4 <TIM_SlaveTimer_SetConfig+0xd8>
 8002f28:	2b50      	cmp	r3, #80	; 0x50
 8002f2a:	d802      	bhi.n	8002f32 <TIM_SlaveTimer_SetConfig+0x66>
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d010      	beq.n	8002f52 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8002f30:	e04d      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002f32:	2b60      	cmp	r3, #96	; 0x60
 8002f34:	d040      	beq.n	8002fb8 <TIM_SlaveTimer_SetConfig+0xec>
 8002f36:	2b70      	cmp	r3, #112	; 0x70
 8002f38:	d000      	beq.n	8002f3c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8002f3a:	e048      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f000 f9c8 	bl	80032e0 <TIM_ETR_SetConfig>
      break;
 8002f50:	e03d      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d101      	bne.n	8002f5e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e038      	b.n	8002fd0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f84:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	621a      	str	r2, [r3, #32]
      break;
 8002fa2:	e014      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f000 f86b 	bl	800308c <TIM_TI1_ConfigInputStage>
      break;
 8002fb6:	e00a      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f000 f8cb 	bl	8003160 <TIM_TI2_ConfigInputStage>
      break;
 8002fca:	e000      	b.n	8002fce <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8002fcc:	bf00      	nop
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <TIM_TI1_SetConfig+0xa8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_TI1_SetConfig+0x46>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d007      	beq.n	800301e <TIM_TI1_SetConfig+0x46>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_TI1_SetConfig+0xac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_TI1_SetConfig+0x46>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <TIM_TI1_SetConfig+0xb0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <TIM_TI1_SetConfig+0x4a>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <TIM_TI1_SetConfig+0x4c>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e003      	b.n	8003042 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	b2db      	uxtb	r3, r3
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f023 030a 	bic.w	r3, r3, #10
 800305c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 030a 	and.w	r3, r3, #10
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800

0800308c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 030a 	bic.w	r3, r3, #10
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0210 	bic.w	r2, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	b29b      	uxth	r3, r3
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0210 	bic.w	r2, r3, #16
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	031b      	lsls	r3, r3, #12
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800319c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	b2db      	uxtb	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003272:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	b29b      	uxth	r3, r3
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003286:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	031b      	lsls	r3, r3, #12
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f043 0307 	orr.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	431a      	orrs	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2201      	movs	r2, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	43db      	mvns	r3, r3
 8003340:	401a      	ands	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800337a:	2302      	movs	r3, #2
 800337c:	e032      	b.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003406:	2302      	movs	r3, #2
 8003408:	e03d      	b.n	8003486 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e03f      	b.n	8003546 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ff1e 	bl	800431c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f90b 	bl	8003714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800351c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800352c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af02      	add	r7, sp, #8
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 8083 	bne.w	8003676 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2e>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e07b      	b.n	8003678 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Transmit+0x40>
 800358a:	2302      	movs	r3, #2
 800358c:	e074      	b.n	8003678 <HAL_UART_Transmit+0x12a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035a4:	f7fd fd26 	bl	8000ff4 <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b6:	e042      	b.n	800363e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	d122      	bne.n	8003616 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f850 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e046      	b.n	8003678 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3302      	adds	r3, #2
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	e017      	b.n	800363e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	e013      	b.n	800363e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f82d 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e023      	b.n	8003678 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	60ba      	str	r2, [r7, #8]
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1b7      	bne.n	80035b8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	2140      	movs	r1, #64	; 0x40
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f814 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00a      	b.n	8003678 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e02c      	b.n	80036ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d028      	beq.n	80036ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a0:	f7fd fca8 	bl	8000ff4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d21d      	bcs.n	80036ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e00f      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	429a      	cmp	r2, r3
 8003708:	d0c3      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800374e:	f023 030c 	bic.w	r3, r3, #12
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	430b      	orrs	r3, r1
 800375a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <UART_SetConfig+0x1ac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d14e      	bne.n	800381a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7fe fc10 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8003780:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	4a4a      	ldr	r2, [pc, #296]	; (80038c4 <UART_SetConfig+0x1b0>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	0119      	lsls	r1, r3, #4
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <UART_SetConfig+0x1b0>)
 80037ba:	fba3 0302 	umull	r0, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2064      	movs	r0, #100	; 0x64
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	3332      	adds	r3, #50	; 0x32
 80037cc:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <UART_SetConfig+0x1b0>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	4419      	add	r1, r3
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <UART_SetConfig+0x1b0>)
 80037f2:	fba3 0302 	umull	r0, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2064      	movs	r0, #100	; 0x64
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <UART_SetConfig+0x1b0>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	440a      	add	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003818:	e04d      	b.n	80038b6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800381a:	f7fe fbad 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 800381e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009a      	lsls	r2, r3, #2
 800382a:	441a      	add	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <UART_SetConfig+0x1b0>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	0119      	lsls	r1, r3, #4
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	fbb2 f2f3 	udiv	r2, r2, r3
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <UART_SetConfig+0x1b0>)
 8003858:	fba3 0302 	umull	r0, r3, r3, r2
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	2064      	movs	r0, #100	; 0x64
 8003860:	fb00 f303 	mul.w	r3, r0, r3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	3332      	adds	r3, #50	; 0x32
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <UART_SetConfig+0x1b0>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003876:	4419      	add	r1, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009a      	lsls	r2, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	fbb2 f2f3 	udiv	r2, r2, r3
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <UART_SetConfig+0x1b0>)
 8003890:	fba3 0302 	umull	r0, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2064      	movs	r0, #100	; 0x64
 8003898:	fb00 f303 	mul.w	r3, r0, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	; 0x32
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <UART_SetConfig+0x1b0>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	440a      	add	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40013800 	.word	0x40013800
 80038c4:	51eb851f 	.word	0x51eb851f

080038c8 <hardwareInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void hardwareInit(GPIO_TypeDef *MuxGPIOx, uint16_t MuxGPIO_Pin, GPIO_TypeDef *BjtGPIOx, uint16_t BjtGPIO_Pin)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	461a      	mov	r2, r3
 80038d4:	460b      	mov	r3, r1
 80038d6:	817b      	strh	r3, [r7, #10]
 80038d8:	4613      	mov	r3, r2
 80038da:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(MuxGPIOx, MuxGPIO_Pin, GPIO_PIN_RESET);  	//disable Multiplexer
 80038dc:	897b      	ldrh	r3, [r7, #10]
 80038de:	2200      	movs	r2, #0
 80038e0:	4619      	mov	r1, r3
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7fd fe1a 	bl	800151c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BjtGPIOx, BjtGPIO_Pin, GPIO_PIN_RESET);	//enable bjt
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe14 	bl	800151c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80038f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038f8:	f7fd fb86 	bl	8001008 <HAL_Delay>
	HAL_GPIO_TogglePin(BjtGPIOx, BjtGPIO_Pin);	//disable bjt
 80038fc:	893b      	ldrh	r3, [r7, #8]
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd fe23 	bl	800154c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(MuxGPIOx, MuxGPIO_Pin);	//enable Multiplexer (select 0 for Vref -1V)
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	4619      	mov	r1, r3
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7fd fe1e 	bl	800154c <HAL_GPIO_TogglePin>
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <convertTimerValueToVoltage>:

double convertTimerValueToVoltage(float Vref, float dischargeTime_us, float chargeTimeFix_us)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	return (((dischargeTime_us*1.0f)/(chargeTimeFix_us*1.0f))*Vref);
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	f7fd fa70 	bl	8000e0c <__aeabi_fdiv>
 800392c:	4603      	mov	r3, r0
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd f9b7 	bl	8000ca4 <__aeabi_fmul>
 8003936:	4603      	mov	r3, r0
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fd75 	bl	8000428 <__aeabi_f2d>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
}
 8003942:	4618      	mov	r0, r3
 8003944:	4621      	mov	r1, r4
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bd90      	pop	{r4, r7, pc}

0800394c <getCounterValue>:

void getCounterValue(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)// if the interrupt source is channel2(falling edge)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7f1b      	ldrb	r3, [r3, #28]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d104      	bne.n	8003966 <getCounterValue+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);// reset the counter
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else
	{
		IC_Value = 0;
	}
}
 8003964:	e00e      	b.n	8003984 <getCounterValue+0x38>
	else if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3)// if the interrupt source is channel3(raising edge)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7f1b      	ldrb	r3, [r3, #28]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <getCounterValue+0x32>
		IC_Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800396e:	2108      	movs	r1, #8
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f861 	bl	8002a38 <HAL_TIM_ReadCapturedValue>
 8003976:	4602      	mov	r2, r0
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <getCounterValue+0x40>)
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	e002      	b.n	8003984 <getCounterValue+0x38>
		IC_Value = 0;
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <getCounterValue+0x40>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200001f8 	.word	0x200001f8

08003990 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	getCounterValue(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffd7 	bl	800394c <getCounterValue>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d104      	bne.n	80039c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		i ++;
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a03      	ldr	r2, [pc, #12]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80039c2:	6013      	str	r3, [r2, #0]
	}
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	200001fc 	.word	0x200001fc

080039d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b093      	sub	sp, #76	; 0x4c
 80039d8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039da:	f7fd fab3 	bl	8000f44 <HAL_Init>

  /* USER CODE BEGIN Init */
    uint16_t Result;
    char str_buff [50];
    double voltage = 0;
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ea:	f000 f871 	bl	8003ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ee:	f000 fab5 	bl	8003f5c <MX_GPIO_Init>
  MX_TIM2_Init();
 80039f2:	f000 f98f 	bl	8003d14 <MX_TIM2_Init>
  MX_I2C1_Init();
 80039f6:	f000 f8b1 	bl	8003b5c <MX_I2C1_Init>
  MX_TIM3_Init();
 80039fa:	f000 f9eb 	bl	8003dd4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80039fe:	f000 f8db 	bl	8003bb8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003a02:	f000 fa81 	bl	8003f08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8003a06:	4829      	ldr	r0, [pc, #164]	; (8003aac <main+0xd8>)
 8003a08:	f7fe fb27 	bl	800205a <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4828      	ldr	r0, [pc, #160]	; (8003ab0 <main+0xdc>)
 8003a10:	f7fe fb7a 	bl	8002108 <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8003a14:	2104      	movs	r1, #4
 8003a16:	4825      	ldr	r0, [pc, #148]	; (8003aac <main+0xd8>)
 8003a18:	f7fe fbd4 	bl	80021c4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8003a1c:	2108      	movs	r1, #8
 8003a1e:	4823      	ldr	r0, [pc, #140]	; (8003aac <main+0xd8>)
 8003a20:	f7fe fbd0 	bl	80021c4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_OnePulse_Start(&htim3, TIM_CHANNEL_1);
 8003a24:	2100      	movs	r1, #0
 8003a26:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <main+0xe0>)
 8003a28:	f7fe fc7a 	bl	8002320 <HAL_TIM_OnePulse_Start>

    hardwareInit(GPIOA, GPIO_PIN_10,GPIOA, GPIO_PIN_11);
 8003a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <main+0xe4>)
 8003a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a36:	4820      	ldr	r0, [pc, #128]	; (8003ab8 <main+0xe4>)
 8003a38:	f7ff ff46 	bl	80038c8 <hardwareInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(i >= 2000){
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <main+0xe8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a44:	d30d      	bcc.n	8003a62 <main+0x8e>
	  		  hardwareInit(GPIOA, GPIO_PIN_10,GPIOA, GPIO_PIN_11);
 8003a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <main+0xe4>)
 8003a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a50:	4819      	ldr	r0, [pc, #100]	; (8003ab8 <main+0xe4>)
 8003a52:	f7ff ff39 	bl	80038c8 <hardwareInit>
	  		  i = 0;
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <main+0xe8>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
	  		  IC_Value = 0;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <main+0xec>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
	  	  }
	  	  Result = IC_Value;
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <main+0xec>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	86fb      	strh	r3, [r7, #54]	; 0x36

	  	  voltage = convertTimerValueToVoltage(1, (float)Result ,100);
 8003a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd f8c2 	bl	8000bf4 <__aeabi_ui2f>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <main+0xf0>)
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a7a:	f7ff ff4d 	bl	8003918 <convertTimerValueToVoltage>
 8003a7e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	  	  sprintf( (char*)str_buff, " Discharge Time is: %d , Voltage : %.2f\n", Result,voltage);
 8003a82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a84:	1d38      	adds	r0, r7, #4
 8003a86:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003a8a:	e9cd 3400 	strd	r3, r4, [sp]
 8003a8e:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <main+0xf4>)
 8003a90:	f001 f9da 	bl	8004e48 <siprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)str_buff, sizeof(str_buff), 100);
 8003a94:	1d39      	adds	r1, r7, #4
 8003a96:	2364      	movs	r3, #100	; 0x64
 8003a98:	2232      	movs	r2, #50	; 0x32
 8003a9a:	480c      	ldr	r0, [pc, #48]	; (8003acc <main+0xf8>)
 8003a9c:	f7ff fd57 	bl	800354e <HAL_UART_Transmit>
	  	  HAL_Delay (500);
 8003aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003aa4:	f7fd fab0 	bl	8001008 <HAL_Delay>
	  if(i >= 2000){
 8003aa8:	e7c8      	b.n	8003a3c <main+0x68>
 8003aaa:	bf00      	nop
 8003aac:	20000324 	.word	0x20000324
 8003ab0:	200002e4 	.word	0x200002e4
 8003ab4:	20000264 	.word	0x20000264
 8003ab8:	40010800 	.word	0x40010800
 8003abc:	200001fc 	.word	0x200001fc
 8003ac0:	200001f8 	.word	0x200001f8
 8003ac4:	42c80000 	.word	0x42c80000
 8003ac8:	08006654 	.word	0x08006654
 8003acc:	200002a4 	.word	0x200002a4

08003ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b090      	sub	sp, #64	; 0x40
 8003ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad6:	f107 0318 	add.w	r3, r7, #24
 8003ada:	2228      	movs	r2, #40	; 0x28
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd5a 	bl	8004598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b00:	2301      	movs	r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b04:	2302      	movs	r3, #2
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b14:	f107 0318 	add.w	r3, r7, #24
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fe57 	bl	80017cc <HAL_RCC_OscConfig>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003b24:	f000 fa88 	bl	8004038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b28:	230f      	movs	r3, #15
 8003b2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	2102      	movs	r1, #2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe f8c2 	bl	8001ccc <HAL_RCC_ClockConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003b4e:	f000 fa73 	bl	8004038 <Error_Handler>
  }
}
 8003b52:	bf00      	nop
 8003b54:	3740      	adds	r7, #64	; 0x40
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <MX_I2C1_Init+0x54>)
 8003b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <MX_I2C1_Init+0x58>)
 8003b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b9a:	f7fd fcef 	bl	800157c <HAL_I2C_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ba4:	f000 fa48 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000210 	.word	0x20000210
 8003bb0:	40005400 	.word	0x40005400
 8003bb4:	00061a80 	.word	0x00061a80

08003bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b096      	sub	sp, #88	; 0x58
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	615a      	str	r2, [r3, #20]
 8003be8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	2220      	movs	r2, #32
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fcd1 	bl	8004598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bf6:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003bf8:	4a45      	ldr	r2, [pc, #276]	; (8003d10 <MX_TIM1_Init+0x158>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003bfc:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003bfe:	2247      	movs	r2, #71	; 0x47
 8003c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8003c08:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c0a:	2264      	movs	r2, #100	; 0x64
 8003c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c14:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c20:	483a      	ldr	r0, [pc, #232]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c22:	f7fe f9ef 	bl	8002004 <HAL_TIM_Base_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003c2c:	f000 fa04 	bl	8004038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4833      	ldr	r0, [pc, #204]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c3e:	f7fe fe01 	bl	8002844 <HAL_TIM_ConfigClockSource>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003c48:	f000 f9f6 	bl	8004038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c4c:	482f      	ldr	r0, [pc, #188]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c4e:	f7fe fa27 	bl	80020a0 <HAL_TIM_PWM_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003c58:	f000 f9ee 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4828      	ldr	r0, [pc, #160]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003c6c:	f7ff fb7b 	bl	8003366 <HAL_TIMEx_MasterConfigSynchronization>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003c76:	f000 f9df 	bl	8004038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c7a:	2360      	movs	r3, #96	; 0x60
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8003c7e:	2332      	movs	r3, #50	; 0x32
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c86:	2300      	movs	r3, #0
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	481b      	ldr	r0, [pc, #108]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003ca0:	f7fe fd0a 	bl	80026b8 <HAL_TIM_PWM_ConfigChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003caa:	f000 f9c5 	bl	8004038 <Error_Handler>
  }
  sConfigOC.Pulse = 360;
 8003cae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb8:	2204      	movs	r2, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4813      	ldr	r0, [pc, #76]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003cbe:	f7fe fcfb 	bl	80026b8 <HAL_TIM_PWM_ConfigChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003cc8:	f000 f9b6 	bl	8004038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4807      	ldr	r0, [pc, #28]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003cf0:	f7ff fb7d 	bl	80033ee <HAL_TIMEx_ConfigBreakDeadTime>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003cfa:	f000 f99d 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cfe:	4803      	ldr	r0, [pc, #12]	; (8003d0c <MX_TIM1_Init+0x154>)
 8003d00:	f000 fab8 	bl	8004274 <HAL_TIM_MspPostInit>

}
 8003d04:	bf00      	nop
 8003d06:	3758      	adds	r7, #88	; 0x58
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200002e4 	.word	0x200002e4
 8003d10:	40012c00 	.word	0x40012c00

08003d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d1a:	f107 0310 	add.w	r3, r7, #16
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d24:	463b      	mov	r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d3a:	2247      	movs	r2, #71	; 0x47
 8003d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003d58:	481d      	ldr	r0, [pc, #116]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d5a:	f7fe fa07 	bl	800216c <HAL_TIM_IC_Init>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d64:	f000 f968 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4619      	mov	r1, r3
 8003d76:	4816      	ldr	r0, [pc, #88]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d78:	f7ff faf5 	bl	8003366 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003d82:	f000 f959 	bl	8004038 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003d86:	2302      	movs	r3, #2
 8003d88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003d96:	463b      	mov	r3, r7
 8003d98:	2204      	movs	r2, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003d9e:	f7fe fbef 	bl	8002580 <HAL_TIM_IC_ConfigChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003da8:	f000 f946 	bl	8004038 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dac:	2300      	movs	r3, #0
 8003dae:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003db0:	463b      	mov	r3, r7
 8003db2:	2208      	movs	r2, #8
 8003db4:	4619      	mov	r1, r3
 8003db6:	4806      	ldr	r0, [pc, #24]	; (8003dd0 <MX_TIM2_Init+0xbc>)
 8003db8:	f7fe fbe2 	bl	8002580 <HAL_TIM_IC_ConfigChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003dc2:	f000 f939 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000324 	.word	0x20000324

08003dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b092      	sub	sp, #72	; 0x48
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e02:	463b      	mov	r3, r7
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	615a      	str	r2, [r3, #20]
 8003e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e16:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <MX_TIM3_Init+0x130>)
 8003e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e20:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003e2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e3a:	4831      	ldr	r0, [pc, #196]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e3c:	f7fe f8e2 	bl	8002004 <HAL_TIM_Base_Init>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003e46:	f000 f8f7 	bl	8004038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e54:	4619      	mov	r1, r3
 8003e56:	482a      	ldr	r0, [pc, #168]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e58:	f7fe fcf4 	bl	8002844 <HAL_TIM_ConfigClockSource>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e62:	f000 f8e9 	bl	8004038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e66:	4826      	ldr	r0, [pc, #152]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e68:	f7fe f91a 	bl	80020a0 <HAL_TIM_PWM_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8003e72:	f000 f8e1 	bl	8004038 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e76:	2108      	movs	r1, #8
 8003e78:	4821      	ldr	r0, [pc, #132]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003e7a:	f7fe fa0b 	bl	8002294 <HAL_TIM_OnePulse_Init>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003e84:	f000 f8d8 	bl	8004038 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003e88:	2306      	movs	r3, #6
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003e8c:	2360      	movs	r3, #96	; 0x60
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4818      	ldr	r0, [pc, #96]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003ea0:	f7fe fd87 	bl	80029b2 <HAL_TIM_SlaveConfigSynchro>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003eaa:	f000 f8c5 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4810      	ldr	r0, [pc, #64]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003ebe:	f7ff fa52 	bl	8003366 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003ec8:	f000 f8b6 	bl	8004038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003ecc:	2370      	movs	r3, #112	; 0x70
 8003ece:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 36;
 8003ed0:	2324      	movs	r3, #36	; 0x24
 8003ed2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003edc:	463b      	mov	r3, r7
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4807      	ldr	r0, [pc, #28]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003ee4:	f7fe fbe8 	bl	80026b8 <HAL_TIM_PWM_ConfigChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003eee:	f000 f8a3 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ef2:	4803      	ldr	r0, [pc, #12]	; (8003f00 <MX_TIM3_Init+0x12c>)
 8003ef4:	f000 f9be 	bl	8004274 <HAL_TIM_MspPostInit>

}
 8003ef8:	bf00      	nop
 8003efa:	3748      	adds	r7, #72	; 0x48
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000264 	.word	0x20000264
 8003f04:	40000400 	.word	0x40000400

08003f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <MX_USART1_UART_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f7ff fab8 	bl	80034b4 <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f4a:	f000 f875 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200002a4 	.word	0x200002a4
 8003f58:	40013800 	.word	0x40013800

08003f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f70:	4b2e      	ldr	r3, [pc, #184]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	4a2d      	ldr	r2, [pc, #180]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	6193      	str	r3, [r2, #24]
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f88:	4b28      	ldr	r3, [pc, #160]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f8e:	f043 0320 	orr.w	r3, r3, #32
 8003f92:	6193      	str	r3, [r2, #24]
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <MX_GPIO_Init+0xd0>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4a21      	ldr	r2, [pc, #132]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6193      	str	r3, [r2, #24]
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fbe:	f043 0308 	orr.w	r3, r3, #8
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <MX_GPIO_Init+0xd0>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fd6:	4816      	ldr	r0, [pc, #88]	; (8004030 <MX_GPIO_Init+0xd4>)
 8003fd8:	f7fd faa0 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003fe2:	4814      	ldr	r0, [pc, #80]	; (8004034 <MX_GPIO_Init+0xd8>)
 8003fe4:	f7fd fa9a 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffa:	f107 0310 	add.w	r3, r7, #16
 8003ffe:	4619      	mov	r1, r3
 8004000:	480b      	ldr	r0, [pc, #44]	; (8004030 <MX_GPIO_Init+0xd4>)
 8004002:	f7fd f931 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800400a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400c:	2301      	movs	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	4619      	mov	r1, r3
 800401e:	4805      	ldr	r0, [pc, #20]	; (8004034 <MX_GPIO_Init+0xd8>)
 8004020:	f7fd f922 	bl	8001268 <HAL_GPIO_Init>

}
 8004024:	bf00      	nop
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	40011000 	.word	0x40011000
 8004034:	40010800 	.word	0x40010800

08004038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_MspInit+0x5c>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_MspInit+0x5c>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6193      	str	r3, [r2, #24]
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_MspInit+0x5c>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_MspInit+0x5c>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_MspInit+0x5c>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_MspInit+0x5c>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_MspInit+0x60>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_MspInit+0x60>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40010000 	.word	0x40010000

080040a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_I2C_MspInit+0x90>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d132      	bne.n	800412e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <HAL_I2C_MspInit+0x94>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <HAL_I2C_MspInit+0x94>)
 80040ce:	f043 0308 	orr.w	r3, r3, #8
 80040d2:	6193      	str	r3, [r2, #24]
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_I2C_MspInit+0x94>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e6:	2312      	movs	r3, #18
 80040e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ea:	2303      	movs	r3, #3
 80040ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4619      	mov	r1, r3
 80040f4:	4812      	ldr	r0, [pc, #72]	; (8004140 <HAL_I2C_MspInit+0x98>)
 80040f6:	f7fd f8b7 	bl	8001268 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_I2C_MspInit+0x9c>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_I2C_MspInit+0x9c>)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_I2C_MspInit+0x94>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <HAL_I2C_MspInit+0x94>)
 800411c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004120:	61d3      	str	r3, [r2, #28]
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_I2C_MspInit+0x94>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800412e:	bf00      	nop
 8004130:	3728      	adds	r7, #40	; 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40005400 	.word	0x40005400
 800413c:	40021000 	.word	0x40021000
 8004140:	40010c00 	.word	0x40010c00
 8004144:	40010000 	.word	0x40010000

08004148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0318 	add.w	r3, r7, #24
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_TIM_Base_MspInit+0x94>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10c      	bne.n	8004182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 800416e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004180:	e028      	b.n	80041d4 <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_TIM_Base_MspInit+0x9c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d123      	bne.n	80041d4 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	61d3      	str	r3, [r2, #28]
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6193      	str	r3, [r2, #24]
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_TIM_Base_MspInit+0x98>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	f107 0318 	add.w	r3, r7, #24
 80041cc:	4619      	mov	r1, r3
 80041ce:	4806      	ldr	r0, [pc, #24]	; (80041e8 <HAL_TIM_Base_MspInit+0xa0>)
 80041d0:	f7fd f84a 	bl	8001268 <HAL_GPIO_Init>
}
 80041d4:	bf00      	nop
 80041d6:	3728      	adds	r7, #40	; 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40010800 	.word	0x40010800

080041ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 0310 	add.w	r3, r7, #16
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d12b      	bne.n	8004264 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	61d3      	str	r3, [r2, #28]
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_TIM_IC_MspInit+0x80>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800423c:	2306      	movs	r3, #6
 800423e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 0310 	add.w	r3, r7, #16
 800424c:	4619      	mov	r1, r3
 800424e:	4808      	ldr	r0, [pc, #32]	; (8004270 <HAL_TIM_IC_MspInit+0x84>)
 8004250:	f7fd f80a 	bl	8001268 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004254:	2200      	movs	r2, #0
 8004256:	2100      	movs	r1, #0
 8004258:	201c      	movs	r0, #28
 800425a:	f7fc ffce 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800425e:	201c      	movs	r0, #28
 8004260:	f7fc ffe7 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004264:	bf00      	nop
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	40010800 	.word	0x40010800

08004274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_TIM_MspPostInit+0x98>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d119      	bne.n	80042c8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b6:	2302      	movs	r3, #2
 80042b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ba:	f107 0310 	add.w	r3, r7, #16
 80042be:	4619      	mov	r1, r3
 80042c0:	4814      	ldr	r0, [pc, #80]	; (8004314 <HAL_TIM_MspPostInit+0xa0>)
 80042c2:	f7fc ffd1 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80042c6:	e01c      	b.n	8004302 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_TIM_MspPostInit+0xa4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d117      	bne.n	8004302 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6193      	str	r3, [r2, #24]
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_TIM_MspPostInit+0x9c>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ea:	2340      	movs	r3, #64	; 0x40
 80042ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	2302      	movs	r3, #2
 80042f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f6:	f107 0310 	add.w	r3, r7, #16
 80042fa:	4619      	mov	r1, r3
 80042fc:	4805      	ldr	r0, [pc, #20]	; (8004314 <HAL_TIM_MspPostInit+0xa0>)
 80042fe:	f7fc ffb3 	bl	8001268 <HAL_GPIO_Init>
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40010800 	.word	0x40010800
 8004318:	40000400 	.word	0x40000400

0800431c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <HAL_UART_MspInit+0xa4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d13d      	bne.n	80043b8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 8004342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004346:	6193      	str	r3, [r2, #24]
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6193      	str	r3, [r2, #24]
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_UART_MspInit+0xa8>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800436c:	2340      	movs	r3, #64	; 0x40
 800436e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	2302      	movs	r3, #2
 8004372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004374:	2303      	movs	r3, #3
 8004376:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	4619      	mov	r1, r3
 800437e:	4812      	ldr	r0, [pc, #72]	; (80043c8 <HAL_UART_MspInit+0xac>)
 8004380:	f7fc ff72 	bl	8001268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	4619      	mov	r1, r3
 8004396:	480c      	ldr	r0, [pc, #48]	; (80043c8 <HAL_UART_MspInit+0xac>)
 8004398:	f7fc ff66 	bl	8001268 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_UART_MspInit+0xb0>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <HAL_UART_MspInit+0xb0>)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043b8:	bf00      	nop
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40010c00 	.word	0x40010c00
 80043cc:	40010000 	.word	0x40010000

080043d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <HardFault_Handler+0x4>

080043e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e6:	e7fe      	b.n	80043e6 <MemManage_Handler+0x4>

080043e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ec:	e7fe      	b.n	80043ec <BusFault_Handler+0x4>

080043ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f2:	e7fe      	b.n	80043f2 <UsageFault_Handler+0x4>

080043f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800441c:	f7fc fdd8 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}

08004424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <TIM2_IRQHandler+0x10>)
 800442a:	f7fd ffa1 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000324 	.word	0x20000324

08004438 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <_sbrk+0x50>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <_sbrk+0x16>
		heap_end = &end;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <_sbrk+0x50>)
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <_sbrk+0x54>)
 800444c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <_sbrk+0x50>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <_sbrk+0x50>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	466a      	mov	r2, sp
 800445e:	4293      	cmp	r3, r2
 8004460:	d907      	bls.n	8004472 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004462:	f000 f86f 	bl	8004544 <__errno>
 8004466:	4602      	mov	r2, r0
 8004468:	230c      	movs	r3, #12
 800446a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e006      	b.n	8004480 <_sbrk+0x48>
	}

	heap_end += incr;
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <_sbrk+0x50>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	4a03      	ldr	r2, [pc, #12]	; (8004488 <_sbrk+0x50>)
 800447c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000200 	.word	0x20000200
 800448c:	20000368 	.word	0x20000368

08004490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <SystemInit+0x5c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <SystemInit+0x5c>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <SystemInit+0x5c>)
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <SystemInit+0x5c>)
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <SystemInit+0x60>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <SystemInit+0x5c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <SystemInit+0x5c>)
 80044b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <SystemInit+0x5c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <SystemInit+0x5c>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <SystemInit+0x5c>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <SystemInit+0x5c>)
 80044ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80044d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <SystemInit+0x5c>)
 80044d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80044da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <SystemInit+0x64>)
 80044de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40021000 	.word	0x40021000
 80044f0:	f8ff0000 	.word	0xf8ff0000
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044fa:	e003      	b.n	8004504 <LoopCopyDataInit>

080044fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004502:	3104      	adds	r1, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004504:	480a      	ldr	r0, [pc, #40]	; (8004530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800450a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800450c:	d3f6      	bcc.n	80044fc <CopyDataInit>
  ldr r2, =_sbss
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004510:	e002      	b.n	8004518 <LoopFillZerobss>

08004512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004514:	f842 3b04 	str.w	r3, [r2], #4

08004518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800451a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800451c:	d3f9      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800451e:	f7ff ffb7 	bl	8004490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004522:	f000 f815 	bl	8004550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004526:	f7ff fa55 	bl	80039d4 <main>
  bx lr
 800452a:	4770      	bx	lr
  ldr r3, =_sidata
 800452c:	08006900 	.word	0x08006900
  ldr r0, =_sdata
 8004530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004534:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8004538:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800453c:	20000368 	.word	0x20000368

08004540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004540:	e7fe      	b.n	8004540 <ADC1_2_IRQHandler>
	...

08004544 <__errno>:
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <__errno+0x8>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	2500      	movs	r5, #0
 8004554:	4e0c      	ldr	r6, [pc, #48]	; (8004588 <__libc_init_array+0x38>)
 8004556:	4c0d      	ldr	r4, [pc, #52]	; (800458c <__libc_init_array+0x3c>)
 8004558:	1ba4      	subs	r4, r4, r6
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	42a5      	cmp	r5, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	f002 f860 	bl	8006624 <_init>
 8004564:	2500      	movs	r5, #0
 8004566:	4e0a      	ldr	r6, [pc, #40]	; (8004590 <__libc_init_array+0x40>)
 8004568:	4c0a      	ldr	r4, [pc, #40]	; (8004594 <__libc_init_array+0x44>)
 800456a:	1ba4      	subs	r4, r4, r6
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	42a5      	cmp	r5, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004578:	4798      	blx	r3
 800457a:	3501      	adds	r5, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004582:	4798      	blx	r3
 8004584:	3501      	adds	r5, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	080068f8 	.word	0x080068f8
 800458c:	080068f8 	.word	0x080068f8
 8004590:	080068f8 	.word	0x080068f8
 8004594:	080068fc 	.word	0x080068fc

08004598 <memset>:
 8004598:	4603      	mov	r3, r0
 800459a:	4402      	add	r2, r0
 800459c:	4293      	cmp	r3, r2
 800459e:	d100      	bne.n	80045a2 <memset+0xa>
 80045a0:	4770      	bx	lr
 80045a2:	f803 1b01 	strb.w	r1, [r3], #1
 80045a6:	e7f9      	b.n	800459c <memset+0x4>

080045a8 <__cvt>:
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ae:	461e      	mov	r6, r3
 80045b0:	bfbb      	ittet	lt
 80045b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	461e      	movlt	r6, r3
 80045b8:	2300      	movge	r3, #0
 80045ba:	232d      	movlt	r3, #45	; 0x2d
 80045bc:	b088      	sub	sp, #32
 80045be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045c0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80045c4:	f027 0720 	bic.w	r7, r7, #32
 80045c8:	2f46      	cmp	r7, #70	; 0x46
 80045ca:	4614      	mov	r4, r2
 80045cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045ce:	700b      	strb	r3, [r1, #0]
 80045d0:	d004      	beq.n	80045dc <__cvt+0x34>
 80045d2:	2f45      	cmp	r7, #69	; 0x45
 80045d4:	d100      	bne.n	80045d8 <__cvt+0x30>
 80045d6:	3501      	adds	r5, #1
 80045d8:	2302      	movs	r3, #2
 80045da:	e000      	b.n	80045de <__cvt+0x36>
 80045dc:	2303      	movs	r3, #3
 80045de:	aa07      	add	r2, sp, #28
 80045e0:	9204      	str	r2, [sp, #16]
 80045e2:	aa06      	add	r2, sp, #24
 80045e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045e8:	e9cd 3500 	strd	r3, r5, [sp]
 80045ec:	4622      	mov	r2, r4
 80045ee:	4633      	mov	r3, r6
 80045f0:	f000 fcda 	bl	8004fa8 <_dtoa_r>
 80045f4:	2f47      	cmp	r7, #71	; 0x47
 80045f6:	4680      	mov	r8, r0
 80045f8:	d102      	bne.n	8004600 <__cvt+0x58>
 80045fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fc:	07db      	lsls	r3, r3, #31
 80045fe:	d526      	bpl.n	800464e <__cvt+0xa6>
 8004600:	2f46      	cmp	r7, #70	; 0x46
 8004602:	eb08 0905 	add.w	r9, r8, r5
 8004606:	d111      	bne.n	800462c <__cvt+0x84>
 8004608:	f898 3000 	ldrb.w	r3, [r8]
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d10a      	bne.n	8004626 <__cvt+0x7e>
 8004610:	2200      	movs	r2, #0
 8004612:	2300      	movs	r3, #0
 8004614:	4620      	mov	r0, r4
 8004616:	4631      	mov	r1, r6
 8004618:	f7fc f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800461c:	b918      	cbnz	r0, 8004626 <__cvt+0x7e>
 800461e:	f1c5 0501 	rsb	r5, r5, #1
 8004622:	f8ca 5000 	str.w	r5, [sl]
 8004626:	f8da 3000 	ldr.w	r3, [sl]
 800462a:	4499      	add	r9, r3
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4620      	mov	r0, r4
 8004632:	4631      	mov	r1, r6
 8004634:	f7fc f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8004638:	b938      	cbnz	r0, 800464a <__cvt+0xa2>
 800463a:	2230      	movs	r2, #48	; 0x30
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	454b      	cmp	r3, r9
 8004640:	d205      	bcs.n	800464e <__cvt+0xa6>
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	9107      	str	r1, [sp, #28]
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e7f8      	b.n	800463c <__cvt+0x94>
 800464a:	f8cd 901c 	str.w	r9, [sp, #28]
 800464e:	4640      	mov	r0, r8
 8004650:	9b07      	ldr	r3, [sp, #28]
 8004652:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004654:	eba3 0308 	sub.w	r3, r3, r8
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	b008      	add	sp, #32
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004660 <__exponent>:
 8004660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	bfb4      	ite	lt
 8004666:	232d      	movlt	r3, #45	; 0x2d
 8004668:	232b      	movge	r3, #43	; 0x2b
 800466a:	4604      	mov	r4, r0
 800466c:	bfb8      	it	lt
 800466e:	4249      	neglt	r1, r1
 8004670:	2909      	cmp	r1, #9
 8004672:	f804 2b02 	strb.w	r2, [r4], #2
 8004676:	7043      	strb	r3, [r0, #1]
 8004678:	dd21      	ble.n	80046be <__exponent+0x5e>
 800467a:	f10d 0307 	add.w	r3, sp, #7
 800467e:	461f      	mov	r7, r3
 8004680:	260a      	movs	r6, #10
 8004682:	fb91 f5f6 	sdiv	r5, r1, r6
 8004686:	fb06 1115 	mls	r1, r6, r5, r1
 800468a:	2d09      	cmp	r5, #9
 800468c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004690:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004694:	f103 32ff 	add.w	r2, r3, #4294967295
 8004698:	4629      	mov	r1, r5
 800469a:	dc09      	bgt.n	80046b0 <__exponent+0x50>
 800469c:	3130      	adds	r1, #48	; 0x30
 800469e:	3b02      	subs	r3, #2
 80046a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046a4:	42bb      	cmp	r3, r7
 80046a6:	4622      	mov	r2, r4
 80046a8:	d304      	bcc.n	80046b4 <__exponent+0x54>
 80046aa:	1a10      	subs	r0, r2, r0
 80046ac:	b003      	add	sp, #12
 80046ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b0:	4613      	mov	r3, r2
 80046b2:	e7e6      	b.n	8004682 <__exponent+0x22>
 80046b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046b8:	f804 2b01 	strb.w	r2, [r4], #1
 80046bc:	e7f2      	b.n	80046a4 <__exponent+0x44>
 80046be:	2330      	movs	r3, #48	; 0x30
 80046c0:	4419      	add	r1, r3
 80046c2:	7083      	strb	r3, [r0, #2]
 80046c4:	1d02      	adds	r2, r0, #4
 80046c6:	70c1      	strb	r1, [r0, #3]
 80046c8:	e7ef      	b.n	80046aa <__exponent+0x4a>
	...

080046cc <_printf_float>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	b091      	sub	sp, #68	; 0x44
 80046d2:	460c      	mov	r4, r1
 80046d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80046d6:	4693      	mov	fp, r2
 80046d8:	461e      	mov	r6, r3
 80046da:	4605      	mov	r5, r0
 80046dc:	f001 fa18 	bl	8005b10 <_localeconv_r>
 80046e0:	6803      	ldr	r3, [r0, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	9309      	str	r3, [sp, #36]	; 0x24
 80046e6:	f7fb fd33 	bl	8000150 <strlen>
 80046ea:	2300      	movs	r3, #0
 80046ec:	930e      	str	r3, [sp, #56]	; 0x38
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	900a      	str	r0, [sp, #40]	; 0x28
 80046f2:	3307      	adds	r3, #7
 80046f4:	f023 0307 	bic.w	r3, r3, #7
 80046f8:	f103 0208 	add.w	r2, r3, #8
 80046fc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004700:	f8d4 a000 	ldr.w	sl, [r4]
 8004704:	603a      	str	r2, [r7, #0]
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800470e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004716:	930b      	str	r3, [sp, #44]	; 0x2c
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	4ba6      	ldr	r3, [pc, #664]	; (80049b8 <_printf_float+0x2ec>)
 800471e:	4638      	mov	r0, r7
 8004720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004722:	f7fc f973 	bl	8000a0c <__aeabi_dcmpun>
 8004726:	bb68      	cbnz	r0, 8004784 <_printf_float+0xb8>
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	4ba2      	ldr	r3, [pc, #648]	; (80049b8 <_printf_float+0x2ec>)
 800472e:	4638      	mov	r0, r7
 8004730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004732:	f7fc f94d 	bl	80009d0 <__aeabi_dcmple>
 8004736:	bb28      	cbnz	r0, 8004784 <_printf_float+0xb8>
 8004738:	2200      	movs	r2, #0
 800473a:	2300      	movs	r3, #0
 800473c:	4638      	mov	r0, r7
 800473e:	4649      	mov	r1, r9
 8004740:	f7fc f93c 	bl	80009bc <__aeabi_dcmplt>
 8004744:	b110      	cbz	r0, 800474c <_printf_float+0x80>
 8004746:	232d      	movs	r3, #45	; 0x2d
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474c:	4f9b      	ldr	r7, [pc, #620]	; (80049bc <_printf_float+0x2f0>)
 800474e:	4b9c      	ldr	r3, [pc, #624]	; (80049c0 <_printf_float+0x2f4>)
 8004750:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004754:	bf98      	it	ls
 8004756:	461f      	movls	r7, r3
 8004758:	2303      	movs	r3, #3
 800475a:	f04f 0900 	mov.w	r9, #0
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	f02a 0304 	bic.w	r3, sl, #4
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	9600      	str	r6, [sp, #0]
 8004768:	465b      	mov	r3, fp
 800476a:	aa0f      	add	r2, sp, #60	; 0x3c
 800476c:	4621      	mov	r1, r4
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f9e2 	bl	8004b38 <_printf_common>
 8004774:	3001      	adds	r0, #1
 8004776:	f040 8090 	bne.w	800489a <_printf_float+0x1ce>
 800477a:	f04f 30ff 	mov.w	r0, #4294967295
 800477e:	b011      	add	sp, #68	; 0x44
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	463a      	mov	r2, r7
 8004786:	464b      	mov	r3, r9
 8004788:	4638      	mov	r0, r7
 800478a:	4649      	mov	r1, r9
 800478c:	f7fc f93e 	bl	8000a0c <__aeabi_dcmpun>
 8004790:	b110      	cbz	r0, 8004798 <_printf_float+0xcc>
 8004792:	4f8c      	ldr	r7, [pc, #560]	; (80049c4 <_printf_float+0x2f8>)
 8004794:	4b8c      	ldr	r3, [pc, #560]	; (80049c8 <_printf_float+0x2fc>)
 8004796:	e7db      	b.n	8004750 <_printf_float+0x84>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	a80d      	add	r0, sp, #52	; 0x34
 80047a2:	a90e      	add	r1, sp, #56	; 0x38
 80047a4:	d140      	bne.n	8004828 <_printf_float+0x15c>
 80047a6:	2306      	movs	r3, #6
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	f04f 0c00 	mov.w	ip, #0
 80047ae:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80047b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80047b6:	6863      	ldr	r3, [r4, #4]
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	463a      	mov	r2, r7
 80047c2:	464b      	mov	r3, r9
 80047c4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff feed 	bl	80045a8 <__cvt>
 80047ce:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80047d2:	2b47      	cmp	r3, #71	; 0x47
 80047d4:	4607      	mov	r7, r0
 80047d6:	d109      	bne.n	80047ec <_printf_float+0x120>
 80047d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047da:	1cd8      	adds	r0, r3, #3
 80047dc:	db02      	blt.n	80047e4 <_printf_float+0x118>
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	dd47      	ble.n	8004874 <_printf_float+0x1a8>
 80047e4:	f1a8 0802 	sub.w	r8, r8, #2
 80047e8:	fa5f f888 	uxtb.w	r8, r8
 80047ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80047f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047f2:	d824      	bhi.n	800483e <_printf_float+0x172>
 80047f4:	3901      	subs	r1, #1
 80047f6:	4642      	mov	r2, r8
 80047f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047fc:	910d      	str	r1, [sp, #52]	; 0x34
 80047fe:	f7ff ff2f 	bl	8004660 <__exponent>
 8004802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004804:	4681      	mov	r9, r0
 8004806:	1813      	adds	r3, r2, r0
 8004808:	2a01      	cmp	r2, #1
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	dc02      	bgt.n	8004814 <_printf_float+0x148>
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	07d1      	lsls	r1, r2, #31
 8004812:	d501      	bpl.n	8004818 <_printf_float+0x14c>
 8004814:	3301      	adds	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0a2      	beq.n	8004766 <_printf_float+0x9a>
 8004820:	232d      	movs	r3, #45	; 0x2d
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004826:	e79e      	b.n	8004766 <_printf_float+0x9a>
 8004828:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800482c:	f000 816e 	beq.w	8004b0c <_printf_float+0x440>
 8004830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004834:	d1b9      	bne.n	80047aa <_printf_float+0xde>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1b7      	bne.n	80047aa <_printf_float+0xde>
 800483a:	2301      	movs	r3, #1
 800483c:	e7b4      	b.n	80047a8 <_printf_float+0xdc>
 800483e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004842:	d119      	bne.n	8004878 <_printf_float+0x1ac>
 8004844:	2900      	cmp	r1, #0
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	dd0c      	ble.n	8004864 <_printf_float+0x198>
 800484a:	6121      	str	r1, [r4, #16]
 800484c:	b913      	cbnz	r3, 8004854 <_printf_float+0x188>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	07d2      	lsls	r2, r2, #31
 8004852:	d502      	bpl.n	800485a <_printf_float+0x18e>
 8004854:	3301      	adds	r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800485c:	f04f 0900 	mov.w	r9, #0
 8004860:	65a3      	str	r3, [r4, #88]	; 0x58
 8004862:	e7d9      	b.n	8004818 <_printf_float+0x14c>
 8004864:	b913      	cbnz	r3, 800486c <_printf_float+0x1a0>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	07d0      	lsls	r0, r2, #31
 800486a:	d501      	bpl.n	8004870 <_printf_float+0x1a4>
 800486c:	3302      	adds	r3, #2
 800486e:	e7f3      	b.n	8004858 <_printf_float+0x18c>
 8004870:	2301      	movs	r3, #1
 8004872:	e7f1      	b.n	8004858 <_printf_float+0x18c>
 8004874:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004878:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800487c:	4293      	cmp	r3, r2
 800487e:	db05      	blt.n	800488c <_printf_float+0x1c0>
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	07d1      	lsls	r1, r2, #31
 8004886:	d5e8      	bpl.n	800485a <_printf_float+0x18e>
 8004888:	3301      	adds	r3, #1
 800488a:	e7e5      	b.n	8004858 <_printf_float+0x18c>
 800488c:	2b00      	cmp	r3, #0
 800488e:	bfcc      	ite	gt
 8004890:	2301      	movgt	r3, #1
 8004892:	f1c3 0302 	rsble	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	e7de      	b.n	8004858 <_printf_float+0x18c>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	055a      	lsls	r2, r3, #21
 800489e:	d407      	bmi.n	80048b0 <_printf_float+0x1e4>
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	463a      	mov	r2, r7
 80048a4:	4659      	mov	r1, fp
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b0      	blx	r6
 80048aa:	3001      	adds	r0, #1
 80048ac:	d129      	bne.n	8004902 <_printf_float+0x236>
 80048ae:	e764      	b.n	800477a <_printf_float+0xae>
 80048b0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80048b4:	f240 80d7 	bls.w	8004a66 <_printf_float+0x39a>
 80048b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048bc:	2200      	movs	r2, #0
 80048be:	2300      	movs	r3, #0
 80048c0:	f7fc f872 	bl	80009a8 <__aeabi_dcmpeq>
 80048c4:	b388      	cbz	r0, 800492a <_printf_float+0x25e>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4a40      	ldr	r2, [pc, #256]	; (80049cc <_printf_float+0x300>)
 80048ca:	4659      	mov	r1, fp
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b0      	blx	r6
 80048d0:	3001      	adds	r0, #1
 80048d2:	f43f af52 	beq.w	800477a <_printf_float+0xae>
 80048d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048da:	429a      	cmp	r2, r3
 80048dc:	db02      	blt.n	80048e4 <_printf_float+0x218>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	07d8      	lsls	r0, r3, #31
 80048e2:	d50e      	bpl.n	8004902 <_printf_float+0x236>
 80048e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e8:	4659      	mov	r1, fp
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b0      	blx	r6
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f af43 	beq.w	800477a <_printf_float+0xae>
 80048f4:	2700      	movs	r7, #0
 80048f6:	f104 081a 	add.w	r8, r4, #26
 80048fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fc:	3b01      	subs	r3, #1
 80048fe:	42bb      	cmp	r3, r7
 8004900:	dc09      	bgt.n	8004916 <_printf_float+0x24a>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	079f      	lsls	r7, r3, #30
 8004906:	f100 80fd 	bmi.w	8004b04 <_printf_float+0x438>
 800490a:	68e0      	ldr	r0, [r4, #12]
 800490c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800490e:	4298      	cmp	r0, r3
 8004910:	bfb8      	it	lt
 8004912:	4618      	movlt	r0, r3
 8004914:	e733      	b.n	800477e <_printf_float+0xb2>
 8004916:	2301      	movs	r3, #1
 8004918:	4642      	mov	r2, r8
 800491a:	4659      	mov	r1, fp
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	3001      	adds	r0, #1
 8004922:	f43f af2a 	beq.w	800477a <_printf_float+0xae>
 8004926:	3701      	adds	r7, #1
 8004928:	e7e7      	b.n	80048fa <_printf_float+0x22e>
 800492a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492c:	2b00      	cmp	r3, #0
 800492e:	dc2b      	bgt.n	8004988 <_printf_float+0x2bc>
 8004930:	2301      	movs	r3, #1
 8004932:	4a26      	ldr	r2, [pc, #152]	; (80049cc <_printf_float+0x300>)
 8004934:	4659      	mov	r1, fp
 8004936:	4628      	mov	r0, r5
 8004938:	47b0      	blx	r6
 800493a:	3001      	adds	r0, #1
 800493c:	f43f af1d 	beq.w	800477a <_printf_float+0xae>
 8004940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004942:	b923      	cbnz	r3, 800494e <_printf_float+0x282>
 8004944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004946:	b913      	cbnz	r3, 800494e <_printf_float+0x282>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	07d9      	lsls	r1, r3, #31
 800494c:	d5d9      	bpl.n	8004902 <_printf_float+0x236>
 800494e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004952:	4659      	mov	r1, fp
 8004954:	4628      	mov	r0, r5
 8004956:	47b0      	blx	r6
 8004958:	3001      	adds	r0, #1
 800495a:	f43f af0e 	beq.w	800477a <_printf_float+0xae>
 800495e:	f04f 0800 	mov.w	r8, #0
 8004962:	f104 091a 	add.w	r9, r4, #26
 8004966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004968:	425b      	negs	r3, r3
 800496a:	4543      	cmp	r3, r8
 800496c:	dc01      	bgt.n	8004972 <_printf_float+0x2a6>
 800496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004970:	e797      	b.n	80048a2 <_printf_float+0x1d6>
 8004972:	2301      	movs	r3, #1
 8004974:	464a      	mov	r2, r9
 8004976:	4659      	mov	r1, fp
 8004978:	4628      	mov	r0, r5
 800497a:	47b0      	blx	r6
 800497c:	3001      	adds	r0, #1
 800497e:	f43f aefc 	beq.w	800477a <_printf_float+0xae>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	e7ee      	b.n	8004966 <_printf_float+0x29a>
 8004988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800498a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800498c:	429a      	cmp	r2, r3
 800498e:	bfa8      	it	ge
 8004990:	461a      	movge	r2, r3
 8004992:	2a00      	cmp	r2, #0
 8004994:	4690      	mov	r8, r2
 8004996:	dd07      	ble.n	80049a8 <_printf_float+0x2dc>
 8004998:	4613      	mov	r3, r2
 800499a:	4659      	mov	r1, fp
 800499c:	463a      	mov	r2, r7
 800499e:	4628      	mov	r0, r5
 80049a0:	47b0      	blx	r6
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f aee9 	beq.w	800477a <_printf_float+0xae>
 80049a8:	f104 031a 	add.w	r3, r4, #26
 80049ac:	f04f 0a00 	mov.w	sl, #0
 80049b0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80049b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b6:	e015      	b.n	80049e4 <_printf_float+0x318>
 80049b8:	7fefffff 	.word	0x7fefffff
 80049bc:	0800669c 	.word	0x0800669c
 80049c0:	08006698 	.word	0x08006698
 80049c4:	080066a4 	.word	0x080066a4
 80049c8:	080066a0 	.word	0x080066a0
 80049cc:	080066a8 	.word	0x080066a8
 80049d0:	2301      	movs	r3, #1
 80049d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049d4:	4659      	mov	r1, fp
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b0      	blx	r6
 80049da:	3001      	adds	r0, #1
 80049dc:	f43f aecd 	beq.w	800477a <_printf_float+0xae>
 80049e0:	f10a 0a01 	add.w	sl, sl, #1
 80049e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80049e8:	eba9 0308 	sub.w	r3, r9, r8
 80049ec:	4553      	cmp	r3, sl
 80049ee:	dcef      	bgt.n	80049d0 <_printf_float+0x304>
 80049f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049f4:	429a      	cmp	r2, r3
 80049f6:	444f      	add	r7, r9
 80049f8:	db14      	blt.n	8004a24 <_printf_float+0x358>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	07da      	lsls	r2, r3, #31
 80049fe:	d411      	bmi.n	8004a24 <_printf_float+0x358>
 8004a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a04:	eba3 0209 	sub.w	r2, r3, r9
 8004a08:	eba3 0901 	sub.w	r9, r3, r1
 8004a0c:	4591      	cmp	r9, r2
 8004a0e:	bfa8      	it	ge
 8004a10:	4691      	movge	r9, r2
 8004a12:	f1b9 0f00 	cmp.w	r9, #0
 8004a16:	dc0d      	bgt.n	8004a34 <_printf_float+0x368>
 8004a18:	2700      	movs	r7, #0
 8004a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a1e:	f104 081a 	add.w	r8, r4, #26
 8004a22:	e018      	b.n	8004a56 <_printf_float+0x38a>
 8004a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a28:	4659      	mov	r1, fp
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d1e6      	bne.n	8004a00 <_printf_float+0x334>
 8004a32:	e6a2      	b.n	800477a <_printf_float+0xae>
 8004a34:	464b      	mov	r3, r9
 8004a36:	463a      	mov	r2, r7
 8004a38:	4659      	mov	r1, fp
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b0      	blx	r6
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d1ea      	bne.n	8004a18 <_printf_float+0x34c>
 8004a42:	e69a      	b.n	800477a <_printf_float+0xae>
 8004a44:	2301      	movs	r3, #1
 8004a46:	4642      	mov	r2, r8
 8004a48:	4659      	mov	r1, fp
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b0      	blx	r6
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f ae93 	beq.w	800477a <_printf_float+0xae>
 8004a54:	3701      	adds	r7, #1
 8004a56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	eba3 0309 	sub.w	r3, r3, r9
 8004a60:	42bb      	cmp	r3, r7
 8004a62:	dcef      	bgt.n	8004a44 <_printf_float+0x378>
 8004a64:	e74d      	b.n	8004902 <_printf_float+0x236>
 8004a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	dc01      	bgt.n	8004a70 <_printf_float+0x3a4>
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	d538      	bpl.n	8004ae2 <_printf_float+0x416>
 8004a70:	2301      	movs	r3, #1
 8004a72:	463a      	mov	r2, r7
 8004a74:	4659      	mov	r1, fp
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f ae7d 	beq.w	800477a <_printf_float+0xae>
 8004a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a84:	4659      	mov	r1, fp
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b0      	blx	r6
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f107 0701 	add.w	r7, r7, #1
 8004a90:	f43f ae73 	beq.w	800477a <_printf_float+0xae>
 8004a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f7fb ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa6:	b9c0      	cbnz	r0, 8004ada <_printf_float+0x40e>
 8004aa8:	4643      	mov	r3, r8
 8004aaa:	463a      	mov	r2, r7
 8004aac:	4659      	mov	r1, fp
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b0      	blx	r6
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d10d      	bne.n	8004ad2 <_printf_float+0x406>
 8004ab6:	e660      	b.n	800477a <_printf_float+0xae>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4642      	mov	r2, r8
 8004abc:	4659      	mov	r1, fp
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b0      	blx	r6
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f43f ae59 	beq.w	800477a <_printf_float+0xae>
 8004ac8:	3701      	adds	r7, #1
 8004aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004acc:	3b01      	subs	r3, #1
 8004ace:	42bb      	cmp	r3, r7
 8004ad0:	dcf2      	bgt.n	8004ab8 <_printf_float+0x3ec>
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad8:	e6e4      	b.n	80048a4 <_printf_float+0x1d8>
 8004ada:	2700      	movs	r7, #0
 8004adc:	f104 081a 	add.w	r8, r4, #26
 8004ae0:	e7f3      	b.n	8004aca <_printf_float+0x3fe>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e7e1      	b.n	8004aaa <_printf_float+0x3de>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4642      	mov	r2, r8
 8004aea:	4659      	mov	r1, fp
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b0      	blx	r6
 8004af0:	3001      	adds	r0, #1
 8004af2:	f43f ae42 	beq.w	800477a <_printf_float+0xae>
 8004af6:	3701      	adds	r7, #1
 8004af8:	68e3      	ldr	r3, [r4, #12]
 8004afa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	42bb      	cmp	r3, r7
 8004b00:	dcf1      	bgt.n	8004ae6 <_printf_float+0x41a>
 8004b02:	e702      	b.n	800490a <_printf_float+0x23e>
 8004b04:	2700      	movs	r7, #0
 8004b06:	f104 0819 	add.w	r8, r4, #25
 8004b0a:	e7f5      	b.n	8004af8 <_printf_float+0x42c>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f43f ae94 	beq.w	800483a <_printf_float+0x16e>
 8004b12:	f04f 0c00 	mov.w	ip, #0
 8004b16:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b1a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004b1e:	6022      	str	r2, [r4, #0]
 8004b20:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b24:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7ff fd3a 	bl	80045a8 <__cvt>
 8004b34:	4607      	mov	r7, r0
 8004b36:	e64f      	b.n	80047d8 <_printf_float+0x10c>

08004b38 <_printf_common>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	461f      	mov	r7, r3
 8004b40:	688a      	ldr	r2, [r1, #8]
 8004b42:	690b      	ldr	r3, [r1, #16]
 8004b44:	4606      	mov	r6, r0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	bfb8      	it	lt
 8004b4a:	4613      	movlt	r3, r2
 8004b4c:	f8c9 3000 	str.w	r3, [r9]
 8004b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b54:	460c      	mov	r4, r1
 8004b56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b5a:	b112      	cbz	r2, 8004b62 <_printf_common+0x2a>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8c9 3000 	str.w	r3, [r9]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b6c:	3302      	addmi	r3, #2
 8004b6e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	f015 0506 	ands.w	r5, r5, #6
 8004b78:	d107      	bne.n	8004b8a <_printf_common+0x52>
 8004b7a:	f104 0a19 	add.w	sl, r4, #25
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	f8d9 2000 	ldr.w	r2, [r9]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	42ab      	cmp	r3, r5
 8004b88:	dc29      	bgt.n	8004bde <_printf_common+0xa6>
 8004b8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	3300      	adds	r3, #0
 8004b92:	bf18      	it	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	0692      	lsls	r2, r2, #26
 8004b98:	d42e      	bmi.n	8004bf8 <_printf_common+0xc0>
 8004b9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d021      	beq.n	8004bec <_printf_common+0xb4>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	68e5      	ldr	r5, [r4, #12]
 8004bac:	f003 0306 	and.w	r3, r3, #6
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	bf18      	it	ne
 8004bb4:	2500      	movne	r5, #0
 8004bb6:	f8d9 2000 	ldr.w	r2, [r9]
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	bf08      	it	eq
 8004bc0:	1aad      	subeq	r5, r5, r2
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	6922      	ldr	r2, [r4, #16]
 8004bc6:	bf08      	it	eq
 8004bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfc4      	itt	gt
 8004bd0:	1a9b      	subgt	r3, r3, r2
 8004bd2:	18ed      	addgt	r5, r5, r3
 8004bd4:	341a      	adds	r4, #26
 8004bd6:	454d      	cmp	r5, r9
 8004bd8:	d11a      	bne.n	8004c10 <_printf_common+0xd8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e008      	b.n	8004bf0 <_printf_common+0xb8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4639      	mov	r1, r7
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0xbc>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	e7c2      	b.n	8004b7e <_printf_common+0x46>
 8004bf8:	2030      	movs	r0, #48	; 0x30
 8004bfa:	18e1      	adds	r1, r4, r3
 8004bfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c06:	4422      	add	r2, r4
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c0e:	e7c4      	b.n	8004b9a <_printf_common+0x62>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4622      	mov	r2, r4
 8004c14:	4639      	mov	r1, r7
 8004c16:	4630      	mov	r0, r6
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0e6      	beq.n	8004bec <_printf_common+0xb4>
 8004c1e:	f109 0901 	add.w	r9, r9, #1
 8004c22:	e7d8      	b.n	8004bd6 <_printf_common+0x9e>

08004c24 <_printf_i>:
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	7e09      	ldrb	r1, [r1, #24]
 8004c30:	b085      	sub	sp, #20
 8004c32:	296e      	cmp	r1, #110	; 0x6e
 8004c34:	4617      	mov	r7, r2
 8004c36:	4606      	mov	r6, r0
 8004c38:	4698      	mov	r8, r3
 8004c3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c3c:	f000 80b3 	beq.w	8004da6 <_printf_i+0x182>
 8004c40:	d822      	bhi.n	8004c88 <_printf_i+0x64>
 8004c42:	2963      	cmp	r1, #99	; 0x63
 8004c44:	d036      	beq.n	8004cb4 <_printf_i+0x90>
 8004c46:	d80a      	bhi.n	8004c5e <_printf_i+0x3a>
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	f000 80b9 	beq.w	8004dc0 <_printf_i+0x19c>
 8004c4e:	2958      	cmp	r1, #88	; 0x58
 8004c50:	f000 8083 	beq.w	8004d5a <_printf_i+0x136>
 8004c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c5c:	e032      	b.n	8004cc4 <_printf_i+0xa0>
 8004c5e:	2964      	cmp	r1, #100	; 0x64
 8004c60:	d001      	beq.n	8004c66 <_printf_i+0x42>
 8004c62:	2969      	cmp	r1, #105	; 0x69
 8004c64:	d1f6      	bne.n	8004c54 <_printf_i+0x30>
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	0605      	lsls	r5, r0, #24
 8004c6c:	f103 0104 	add.w	r1, r3, #4
 8004c70:	d52a      	bpl.n	8004cc8 <_printf_i+0xa4>
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da03      	bge.n	8004c82 <_printf_i+0x5e>
 8004c7a:	222d      	movs	r2, #45	; 0x2d
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c82:	486f      	ldr	r0, [pc, #444]	; (8004e40 <_printf_i+0x21c>)
 8004c84:	220a      	movs	r2, #10
 8004c86:	e039      	b.n	8004cfc <_printf_i+0xd8>
 8004c88:	2973      	cmp	r1, #115	; 0x73
 8004c8a:	f000 809d 	beq.w	8004dc8 <_printf_i+0x1a4>
 8004c8e:	d808      	bhi.n	8004ca2 <_printf_i+0x7e>
 8004c90:	296f      	cmp	r1, #111	; 0x6f
 8004c92:	d020      	beq.n	8004cd6 <_printf_i+0xb2>
 8004c94:	2970      	cmp	r1, #112	; 0x70
 8004c96:	d1dd      	bne.n	8004c54 <_printf_i+0x30>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	e003      	b.n	8004caa <_printf_i+0x86>
 8004ca2:	2975      	cmp	r1, #117	; 0x75
 8004ca4:	d017      	beq.n	8004cd6 <_printf_i+0xb2>
 8004ca6:	2978      	cmp	r1, #120	; 0x78
 8004ca8:	d1d4      	bne.n	8004c54 <_printf_i+0x30>
 8004caa:	2378      	movs	r3, #120	; 0x78
 8004cac:	4865      	ldr	r0, [pc, #404]	; (8004e44 <_printf_i+0x220>)
 8004cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb2:	e055      	b.n	8004d60 <_printf_i+0x13c>
 8004cb4:	6813      	ldr	r3, [r2, #0]
 8004cb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cba:	1d19      	adds	r1, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e08c      	b.n	8004de2 <_printf_i+0x1be>
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cce:	6011      	str	r1, [r2, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	b21b      	sxthne	r3, r3
 8004cd4:	e7cf      	b.n	8004c76 <_printf_i+0x52>
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	6825      	ldr	r5, [r4, #0]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6010      	str	r0, [r2, #0]
 8004cde:	0628      	lsls	r0, r5, #24
 8004ce0:	d501      	bpl.n	8004ce6 <_printf_i+0xc2>
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	e002      	b.n	8004cec <_printf_i+0xc8>
 8004ce6:	0668      	lsls	r0, r5, #25
 8004ce8:	d5fb      	bpl.n	8004ce2 <_printf_i+0xbe>
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	296f      	cmp	r1, #111	; 0x6f
 8004cee:	bf14      	ite	ne
 8004cf0:	220a      	movne	r2, #10
 8004cf2:	2208      	moveq	r2, #8
 8004cf4:	4852      	ldr	r0, [pc, #328]	; (8004e40 <_printf_i+0x21c>)
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cfc:	6865      	ldr	r5, [r4, #4]
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	60a5      	str	r5, [r4, #8]
 8004d02:	f2c0 8095 	blt.w	8004e30 <_printf_i+0x20c>
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	f021 0104 	bic.w	r1, r1, #4
 8004d0c:	6021      	str	r1, [r4, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d13d      	bne.n	8004d8e <_printf_i+0x16a>
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	f040 808e 	bne.w	8004e34 <_printf_i+0x210>
 8004d18:	4665      	mov	r5, ip
 8004d1a:	2a08      	cmp	r2, #8
 8004d1c:	d10b      	bne.n	8004d36 <_printf_i+0x112>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d508      	bpl.n	8004d36 <_printf_i+0x112>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bfde      	ittt	le
 8004d2c:	2330      	movle	r3, #48	; 0x30
 8004d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d36:	ebac 0305 	sub.w	r3, ip, r5
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	f8cd 8000 	str.w	r8, [sp]
 8004d40:	463b      	mov	r3, r7
 8004d42:	aa03      	add	r2, sp, #12
 8004d44:	4621      	mov	r1, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff fef6 	bl	8004b38 <_printf_common>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d14d      	bne.n	8004dec <_printf_i+0x1c8>
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	b005      	add	sp, #20
 8004d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	4839      	ldr	r0, [pc, #228]	; (8004e40 <_printf_i+0x21c>)
 8004d5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	1d1d      	adds	r5, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6015      	str	r5, [r2, #0]
 8004d6a:	060a      	lsls	r2, r1, #24
 8004d6c:	d50b      	bpl.n	8004d86 <_printf_i+0x162>
 8004d6e:	07ca      	lsls	r2, r1, #31
 8004d70:	bf44      	itt	mi
 8004d72:	f041 0120 	orrmi.w	r1, r1, #32
 8004d76:	6021      	strmi	r1, [r4, #0]
 8004d78:	b91b      	cbnz	r3, 8004d82 <_printf_i+0x15e>
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	f022 0220 	bic.w	r2, r2, #32
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	2210      	movs	r2, #16
 8004d84:	e7b7      	b.n	8004cf6 <_printf_i+0xd2>
 8004d86:	064d      	lsls	r5, r1, #25
 8004d88:	bf48      	it	mi
 8004d8a:	b29b      	uxthmi	r3, r3
 8004d8c:	e7ef      	b.n	8004d6e <_printf_i+0x14a>
 8004d8e:	4665      	mov	r5, ip
 8004d90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d94:	fb02 3311 	mls	r3, r2, r1, r3
 8004d98:	5cc3      	ldrb	r3, [r0, r3]
 8004d9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d9e:	460b      	mov	r3, r1
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d1f5      	bne.n	8004d90 <_printf_i+0x16c>
 8004da4:	e7b9      	b.n	8004d1a <_printf_i+0xf6>
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	1d18      	adds	r0, r3, #4
 8004dac:	6961      	ldr	r1, [r4, #20]
 8004dae:	6010      	str	r0, [r2, #0]
 8004db0:	0628      	lsls	r0, r5, #24
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	d501      	bpl.n	8004dba <_printf_i+0x196>
 8004db6:	6019      	str	r1, [r3, #0]
 8004db8:	e002      	b.n	8004dc0 <_printf_i+0x19c>
 8004dba:	066a      	lsls	r2, r5, #25
 8004dbc:	d5fb      	bpl.n	8004db6 <_printf_i+0x192>
 8004dbe:	8019      	strh	r1, [r3, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4665      	mov	r5, ip
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	e7b9      	b.n	8004d3c <_printf_i+0x118>
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	1d19      	adds	r1, r3, #4
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	681d      	ldr	r5, [r3, #0]
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 feb1 	bl	8005b3c <memchr>
 8004dda:	b108      	cbz	r0, 8004de0 <_printf_i+0x1bc>
 8004ddc:	1b40      	subs	r0, r0, r5
 8004dde:	6060      	str	r0, [r4, #4]
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	2300      	movs	r3, #0
 8004de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dea:	e7a7      	b.n	8004d3c <_printf_i+0x118>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	462a      	mov	r2, r5
 8004df0:	4639      	mov	r1, r7
 8004df2:	4630      	mov	r0, r6
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0aa      	beq.n	8004d50 <_printf_i+0x12c>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	079b      	lsls	r3, r3, #30
 8004dfe:	d413      	bmi.n	8004e28 <_printf_i+0x204>
 8004e00:	68e0      	ldr	r0, [r4, #12]
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	4298      	cmp	r0, r3
 8004e06:	bfb8      	it	lt
 8004e08:	4618      	movlt	r0, r3
 8004e0a:	e7a3      	b.n	8004d54 <_printf_i+0x130>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	464a      	mov	r2, r9
 8004e10:	4639      	mov	r1, r7
 8004e12:	4630      	mov	r0, r6
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d09a      	beq.n	8004d50 <_printf_i+0x12c>
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	68e3      	ldr	r3, [r4, #12]
 8004e1e:	9a03      	ldr	r2, [sp, #12]
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	42ab      	cmp	r3, r5
 8004e24:	dcf2      	bgt.n	8004e0c <_printf_i+0x1e8>
 8004e26:	e7eb      	b.n	8004e00 <_printf_i+0x1dc>
 8004e28:	2500      	movs	r5, #0
 8004e2a:	f104 0919 	add.w	r9, r4, #25
 8004e2e:	e7f5      	b.n	8004e1c <_printf_i+0x1f8>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ac      	bne.n	8004d8e <_printf_i+0x16a>
 8004e34:	7803      	ldrb	r3, [r0, #0]
 8004e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e3e:	e76c      	b.n	8004d1a <_printf_i+0xf6>
 8004e40:	080066aa 	.word	0x080066aa
 8004e44:	080066bb 	.word	0x080066bb

08004e48 <siprintf>:
 8004e48:	b40e      	push	{r1, r2, r3}
 8004e4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4e:	b500      	push	{lr}
 8004e50:	b09c      	sub	sp, #112	; 0x70
 8004e52:	ab1d      	add	r3, sp, #116	; 0x74
 8004e54:	9002      	str	r0, [sp, #8]
 8004e56:	9006      	str	r0, [sp, #24]
 8004e58:	9107      	str	r1, [sp, #28]
 8004e5a:	9104      	str	r1, [sp, #16]
 8004e5c:	4808      	ldr	r0, [pc, #32]	; (8004e80 <siprintf+0x38>)
 8004e5e:	4909      	ldr	r1, [pc, #36]	; (8004e84 <siprintf+0x3c>)
 8004e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e64:	9105      	str	r1, [sp, #20]
 8004e66:	6800      	ldr	r0, [r0, #0]
 8004e68:	a902      	add	r1, sp, #8
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	f001 fa6a 	bl	8006344 <_svfiprintf_r>
 8004e70:	2200      	movs	r2, #0
 8004e72:	9b02      	ldr	r3, [sp, #8]
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	b01c      	add	sp, #112	; 0x70
 8004e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e7c:	b003      	add	sp, #12
 8004e7e:	4770      	bx	lr
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	ffff0208 	.word	0xffff0208

08004e88 <quorem>:
 8004e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	6903      	ldr	r3, [r0, #16]
 8004e8e:	690c      	ldr	r4, [r1, #16]
 8004e90:	4680      	mov	r8, r0
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	f2c0 8084 	blt.w	8004fa0 <quorem+0x118>
 8004e98:	3c01      	subs	r4, #1
 8004e9a:	f101 0714 	add.w	r7, r1, #20
 8004e9e:	f100 0614 	add.w	r6, r0, #20
 8004ea2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004ea6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004eaa:	3501      	adds	r5, #1
 8004eac:	fbb0 f5f5 	udiv	r5, r0, r5
 8004eb0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004eb4:	eb06 030c 	add.w	r3, r6, ip
 8004eb8:	eb07 090c 	add.w	r9, r7, ip
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	b39d      	cbz	r5, 8004f28 <quorem+0xa0>
 8004ec0:	f04f 0a00 	mov.w	sl, #0
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	46b6      	mov	lr, r6
 8004ec8:	46d3      	mov	fp, sl
 8004eca:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ece:	b293      	uxth	r3, r2
 8004ed0:	fb05 a303 	mla	r3, r5, r3, sl
 8004ed4:	0c12      	lsrs	r2, r2, #16
 8004ed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eda:	fb05 a202 	mla	r2, r5, r2, sl
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	ebab 0303 	sub.w	r3, fp, r3
 8004ee4:	f8de b000 	ldr.w	fp, [lr]
 8004ee8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004eec:	fa1f fb8b 	uxth.w	fp, fp
 8004ef0:	445b      	add	r3, fp
 8004ef2:	fa1f fb82 	uxth.w	fp, r2
 8004ef6:	f8de 2000 	ldr.w	r2, [lr]
 8004efa:	4581      	cmp	r9, r0
 8004efc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f0a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004f0e:	f84e 3b04 	str.w	r3, [lr], #4
 8004f12:	d2da      	bcs.n	8004eca <quorem+0x42>
 8004f14:	f856 300c 	ldr.w	r3, [r6, ip]
 8004f18:	b933      	cbnz	r3, 8004f28 <quorem+0xa0>
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	429e      	cmp	r6, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	d331      	bcc.n	8004f88 <quorem+0x100>
 8004f24:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f28:	4640      	mov	r0, r8
 8004f2a:	f001 f835 	bl	8005f98 <__mcmp>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	db26      	blt.n	8004f80 <quorem+0xf8>
 8004f32:	4630      	mov	r0, r6
 8004f34:	f04f 0c00 	mov.w	ip, #0
 8004f38:	3501      	adds	r5, #1
 8004f3a:	f857 1b04 	ldr.w	r1, [r7], #4
 8004f3e:	f8d0 e000 	ldr.w	lr, [r0]
 8004f42:	b28b      	uxth	r3, r1
 8004f44:	ebac 0303 	sub.w	r3, ip, r3
 8004f48:	fa1f f28e 	uxth.w	r2, lr
 8004f4c:	4413      	add	r3, r2
 8004f4e:	0c0a      	lsrs	r2, r1, #16
 8004f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f5e:	45b9      	cmp	r9, r7
 8004f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f64:	f840 3b04 	str.w	r3, [r0], #4
 8004f68:	d2e7      	bcs.n	8004f3a <quorem+0xb2>
 8004f6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f72:	b92a      	cbnz	r2, 8004f80 <quorem+0xf8>
 8004f74:	3b04      	subs	r3, #4
 8004f76:	429e      	cmp	r6, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	d30b      	bcc.n	8004f94 <quorem+0x10c>
 8004f7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f80:	4628      	mov	r0, r5
 8004f82:	b003      	add	sp, #12
 8004f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d1c9      	bne.n	8004f24 <quorem+0x9c>
 8004f90:	3c01      	subs	r4, #1
 8004f92:	e7c4      	b.n	8004f1e <quorem+0x96>
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	3b04      	subs	r3, #4
 8004f98:	2a00      	cmp	r2, #0
 8004f9a:	d1ef      	bne.n	8004f7c <quorem+0xf4>
 8004f9c:	3c01      	subs	r4, #1
 8004f9e:	e7ea      	b.n	8004f76 <quorem+0xee>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7ee      	b.n	8004f82 <quorem+0xfa>
 8004fa4:	0000      	movs	r0, r0
	...

08004fa8 <_dtoa_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	4616      	mov	r6, r2
 8004fae:	461f      	mov	r7, r3
 8004fb0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fb2:	b095      	sub	sp, #84	; 0x54
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004fba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004fbe:	b93d      	cbnz	r5, 8004fd0 <_dtoa_r+0x28>
 8004fc0:	2010      	movs	r0, #16
 8004fc2:	f000 fdb3 	bl	8005b2c <malloc>
 8004fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8004fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fcc:	6005      	str	r5, [r0, #0]
 8004fce:	60c5      	str	r5, [r0, #12]
 8004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	b151      	cbz	r1, 8004fec <_dtoa_r+0x44>
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4093      	lsls	r3, r2
 8004fdc:	604a      	str	r2, [r1, #4]
 8004fde:	608b      	str	r3, [r1, #8]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fdf8 	bl	8005bd6 <_Bfree>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	1e3b      	subs	r3, r7, #0
 8004fee:	bfaf      	iteee	ge
 8004ff0:	2300      	movge	r3, #0
 8004ff2:	2201      	movlt	r2, #1
 8004ff4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ff8:	9303      	strlt	r3, [sp, #12]
 8004ffa:	bfac      	ite	ge
 8004ffc:	f8c8 3000 	strge.w	r3, [r8]
 8005000:	f8c8 2000 	strlt.w	r2, [r8]
 8005004:	4bae      	ldr	r3, [pc, #696]	; (80052c0 <_dtoa_r+0x318>)
 8005006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800500a:	ea33 0308 	bics.w	r3, r3, r8
 800500e:	d11b      	bne.n	8005048 <_dtoa_r+0xa0>
 8005010:	f242 730f 	movw	r3, #9999	; 0x270f
 8005014:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	b923      	cbnz	r3, 8005026 <_dtoa_r+0x7e>
 800501c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005020:	2800      	cmp	r0, #0
 8005022:	f000 8545 	beq.w	8005ab0 <_dtoa_r+0xb08>
 8005026:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005028:	b953      	cbnz	r3, 8005040 <_dtoa_r+0x98>
 800502a:	4ba6      	ldr	r3, [pc, #664]	; (80052c4 <_dtoa_r+0x31c>)
 800502c:	e021      	b.n	8005072 <_dtoa_r+0xca>
 800502e:	4ba6      	ldr	r3, [pc, #664]	; (80052c8 <_dtoa_r+0x320>)
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	3308      	adds	r3, #8
 8005034:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	9806      	ldr	r0, [sp, #24]
 800503a:	b015      	add	sp, #84	; 0x54
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	4ba0      	ldr	r3, [pc, #640]	; (80052c4 <_dtoa_r+0x31c>)
 8005042:	9306      	str	r3, [sp, #24]
 8005044:	3303      	adds	r3, #3
 8005046:	e7f5      	b.n	8005034 <_dtoa_r+0x8c>
 8005048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8005058:	4682      	mov	sl, r0
 800505a:	b160      	cbz	r0, 8005076 <_dtoa_r+0xce>
 800505c:	2301      	movs	r3, #1
 800505e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8520 	beq.w	8005aaa <_dtoa_r+0xb02>
 800506a:	4b98      	ldr	r3, [pc, #608]	; (80052cc <_dtoa_r+0x324>)
 800506c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	3b01      	subs	r3, #1
 8005072:	9306      	str	r3, [sp, #24]
 8005074:	e7e0      	b.n	8005038 <_dtoa_r+0x90>
 8005076:	ab12      	add	r3, sp, #72	; 0x48
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	ab13      	add	r3, sp, #76	; 0x4c
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4632      	mov	r2, r6
 8005080:	463b      	mov	r3, r7
 8005082:	4620      	mov	r0, r4
 8005084:	f001 f800 	bl	8006088 <__d2b>
 8005088:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800508c:	4683      	mov	fp, r0
 800508e:	2d00      	cmp	r5, #0
 8005090:	d07d      	beq.n	800518e <_dtoa_r+0x1e6>
 8005092:	46b0      	mov	r8, r6
 8005094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005098:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800509c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80050a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b89      	ldr	r3, [pc, #548]	; (80052d0 <_dtoa_r+0x328>)
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb f85a 	bl	8000168 <__aeabi_dsub>
 80050b4:	a37c      	add	r3, pc, #496	; (adr r3, 80052a8 <_dtoa_r+0x300>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb fa0d 	bl	80004d8 <__aeabi_dmul>
 80050be:	a37c      	add	r3, pc, #496	; (adr r3, 80052b0 <_dtoa_r+0x308>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb f852 	bl	800016c <__adddf3>
 80050c8:	4606      	mov	r6, r0
 80050ca:	4628      	mov	r0, r5
 80050cc:	460f      	mov	r7, r1
 80050ce:	f7fb f999 	bl	8000404 <__aeabi_i2d>
 80050d2:	a379      	add	r3, pc, #484	; (adr r3, 80052b8 <_dtoa_r+0x310>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb f9fe 	bl	80004d8 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4630      	mov	r0, r6
 80050e2:	4639      	mov	r1, r7
 80050e4:	f7fb f842 	bl	800016c <__adddf3>
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	f7fb fca4 	bl	8000a38 <__aeabi_d2iz>
 80050f0:	2200      	movs	r2, #0
 80050f2:	4682      	mov	sl, r0
 80050f4:	2300      	movs	r3, #0
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fc5f 	bl	80009bc <__aeabi_dcmplt>
 80050fe:	b148      	cbz	r0, 8005114 <_dtoa_r+0x16c>
 8005100:	4650      	mov	r0, sl
 8005102:	f7fb f97f 	bl	8000404 <__aeabi_i2d>
 8005106:	4632      	mov	r2, r6
 8005108:	463b      	mov	r3, r7
 800510a:	f7fb fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800510e:	b908      	cbnz	r0, 8005114 <_dtoa_r+0x16c>
 8005110:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005114:	f1ba 0f16 	cmp.w	sl, #22
 8005118:	d85a      	bhi.n	80051d0 <_dtoa_r+0x228>
 800511a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800511e:	496d      	ldr	r1, [pc, #436]	; (80052d4 <_dtoa_r+0x32c>)
 8005120:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005128:	f7fb fc66 	bl	80009f8 <__aeabi_dcmpgt>
 800512c:	2800      	cmp	r0, #0
 800512e:	d051      	beq.n	80051d4 <_dtoa_r+0x22c>
 8005130:	2300      	movs	r3, #0
 8005132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005136:	930d      	str	r3, [sp, #52]	; 0x34
 8005138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800513a:	1b5d      	subs	r5, r3, r5
 800513c:	1e6b      	subs	r3, r5, #1
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	bf43      	ittte	mi
 8005142:	2300      	movmi	r3, #0
 8005144:	f1c5 0901 	rsbmi	r9, r5, #1
 8005148:	9307      	strmi	r3, [sp, #28]
 800514a:	f04f 0900 	movpl.w	r9, #0
 800514e:	f1ba 0f00 	cmp.w	sl, #0
 8005152:	db41      	blt.n	80051d8 <_dtoa_r+0x230>
 8005154:	9b07      	ldr	r3, [sp, #28]
 8005156:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800515a:	4453      	add	r3, sl
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	2300      	movs	r3, #0
 8005160:	9308      	str	r3, [sp, #32]
 8005162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005164:	2b09      	cmp	r3, #9
 8005166:	f200 808f 	bhi.w	8005288 <_dtoa_r+0x2e0>
 800516a:	2b05      	cmp	r3, #5
 800516c:	bfc4      	itt	gt
 800516e:	3b04      	subgt	r3, #4
 8005170:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005174:	bfc8      	it	gt
 8005176:	2500      	movgt	r5, #0
 8005178:	f1a3 0302 	sub.w	r3, r3, #2
 800517c:	bfd8      	it	le
 800517e:	2501      	movle	r5, #1
 8005180:	2b03      	cmp	r3, #3
 8005182:	f200 808d 	bhi.w	80052a0 <_dtoa_r+0x2f8>
 8005186:	e8df f003 	tbb	[pc, r3]
 800518a:	7d7b      	.short	0x7d7b
 800518c:	6f2f      	.short	0x6f2f
 800518e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005192:	441d      	add	r5, r3
 8005194:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005198:	2820      	cmp	r0, #32
 800519a:	dd13      	ble.n	80051c4 <_dtoa_r+0x21c>
 800519c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80051a0:	9b02      	ldr	r3, [sp, #8]
 80051a2:	fa08 f800 	lsl.w	r8, r8, r0
 80051a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80051aa:	fa23 f000 	lsr.w	r0, r3, r0
 80051ae:	ea48 0000 	orr.w	r0, r8, r0
 80051b2:	f7fb f917 	bl	80003e4 <__aeabi_ui2d>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4680      	mov	r8, r0
 80051ba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80051be:	3d01      	subs	r5, #1
 80051c0:	9310      	str	r3, [sp, #64]	; 0x40
 80051c2:	e771      	b.n	80050a8 <_dtoa_r+0x100>
 80051c4:	9b02      	ldr	r3, [sp, #8]
 80051c6:	f1c0 0020 	rsb	r0, r0, #32
 80051ca:	fa03 f000 	lsl.w	r0, r3, r0
 80051ce:	e7f0      	b.n	80051b2 <_dtoa_r+0x20a>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e7b0      	b.n	8005136 <_dtoa_r+0x18e>
 80051d4:	900d      	str	r0, [sp, #52]	; 0x34
 80051d6:	e7af      	b.n	8005138 <_dtoa_r+0x190>
 80051d8:	f1ca 0300 	rsb	r3, sl, #0
 80051dc:	9308      	str	r3, [sp, #32]
 80051de:	2300      	movs	r3, #0
 80051e0:	eba9 090a 	sub.w	r9, r9, sl
 80051e4:	930c      	str	r3, [sp, #48]	; 0x30
 80051e6:	e7bc      	b.n	8005162 <_dtoa_r+0x1ba>
 80051e8:	2301      	movs	r3, #1
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dd74      	ble.n	80052dc <_dtoa_r+0x334>
 80051f2:	4698      	mov	r8, r3
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	2200      	movs	r2, #0
 80051f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051fa:	6072      	str	r2, [r6, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	f102 0014 	add.w	r0, r2, #20
 8005202:	4298      	cmp	r0, r3
 8005204:	6871      	ldr	r1, [r6, #4]
 8005206:	d96e      	bls.n	80052e6 <_dtoa_r+0x33e>
 8005208:	4620      	mov	r0, r4
 800520a:	f000 fcb0 	bl	8005b6e <_Balloc>
 800520e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005210:	6030      	str	r0, [r6, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b8 0f0e 	cmp.w	r8, #14
 8005218:	9306      	str	r3, [sp, #24]
 800521a:	f200 80ed 	bhi.w	80053f8 <_dtoa_r+0x450>
 800521e:	2d00      	cmp	r5, #0
 8005220:	f000 80ea 	beq.w	80053f8 <_dtoa_r+0x450>
 8005224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005230:	dd77      	ble.n	8005322 <_dtoa_r+0x37a>
 8005232:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <_dtoa_r+0x32c>)
 8005234:	f00a 030f 	and.w	r3, sl, #15
 8005238:	ea4f 162a 	mov.w	r6, sl, asr #4
 800523c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005240:	06f0      	lsls	r0, r6, #27
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800524a:	d568      	bpl.n	800531e <_dtoa_r+0x376>
 800524c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <_dtoa_r+0x330>)
 8005252:	2503      	movs	r5, #3
 8005254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005258:	f7fb fa68 	bl	800072c <__aeabi_ddiv>
 800525c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005260:	f006 060f 	and.w	r6, r6, #15
 8005264:	4f1c      	ldr	r7, [pc, #112]	; (80052d8 <_dtoa_r+0x330>)
 8005266:	e04f      	b.n	8005308 <_dtoa_r+0x360>
 8005268:	2301      	movs	r3, #1
 800526a:	9309      	str	r3, [sp, #36]	; 0x24
 800526c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800526e:	4453      	add	r3, sl
 8005270:	f103 0801 	add.w	r8, r3, #1
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	4643      	mov	r3, r8
 8005278:	2b01      	cmp	r3, #1
 800527a:	bfb8      	it	lt
 800527c:	2301      	movlt	r3, #1
 800527e:	e7ba      	b.n	80051f6 <_dtoa_r+0x24e>
 8005280:	2300      	movs	r3, #0
 8005282:	e7b2      	b.n	80051ea <_dtoa_r+0x242>
 8005284:	2300      	movs	r3, #0
 8005286:	e7f0      	b.n	800526a <_dtoa_r+0x2c2>
 8005288:	2501      	movs	r5, #1
 800528a:	2300      	movs	r3, #0
 800528c:	9509      	str	r5, [sp, #36]	; 0x24
 800528e:	931e      	str	r3, [sp, #120]	; 0x78
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
 8005294:	2200      	movs	r2, #0
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	4698      	mov	r8, r3
 800529a:	2312      	movs	r3, #18
 800529c:	921f      	str	r2, [sp, #124]	; 0x7c
 800529e:	e7aa      	b.n	80051f6 <_dtoa_r+0x24e>
 80052a0:	2301      	movs	r3, #1
 80052a2:	9309      	str	r3, [sp, #36]	; 0x24
 80052a4:	e7f4      	b.n	8005290 <_dtoa_r+0x2e8>
 80052a6:	bf00      	nop
 80052a8:	636f4361 	.word	0x636f4361
 80052ac:	3fd287a7 	.word	0x3fd287a7
 80052b0:	8b60c8b3 	.word	0x8b60c8b3
 80052b4:	3fc68a28 	.word	0x3fc68a28
 80052b8:	509f79fb 	.word	0x509f79fb
 80052bc:	3fd34413 	.word	0x3fd34413
 80052c0:	7ff00000 	.word	0x7ff00000
 80052c4:	080066d5 	.word	0x080066d5
 80052c8:	080066cc 	.word	0x080066cc
 80052cc:	080066a9 	.word	0x080066a9
 80052d0:	3ff80000 	.word	0x3ff80000
 80052d4:	08006708 	.word	0x08006708
 80052d8:	080066e0 	.word	0x080066e0
 80052dc:	2301      	movs	r3, #1
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	4698      	mov	r8, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	e7da      	b.n	800529c <_dtoa_r+0x2f4>
 80052e6:	3101      	adds	r1, #1
 80052e8:	6071      	str	r1, [r6, #4]
 80052ea:	0052      	lsls	r2, r2, #1
 80052ec:	e787      	b.n	80051fe <_dtoa_r+0x256>
 80052ee:	07f1      	lsls	r1, r6, #31
 80052f0:	d508      	bpl.n	8005304 <_dtoa_r+0x35c>
 80052f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fa:	f7fb f8ed 	bl	80004d8 <__aeabi_dmul>
 80052fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005302:	3501      	adds	r5, #1
 8005304:	1076      	asrs	r6, r6, #1
 8005306:	3708      	adds	r7, #8
 8005308:	2e00      	cmp	r6, #0
 800530a:	d1f0      	bne.n	80052ee <_dtoa_r+0x346>
 800530c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005314:	f7fb fa0a 	bl	800072c <__aeabi_ddiv>
 8005318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800531c:	e01b      	b.n	8005356 <_dtoa_r+0x3ae>
 800531e:	2502      	movs	r5, #2
 8005320:	e7a0      	b.n	8005264 <_dtoa_r+0x2bc>
 8005322:	f000 80a4 	beq.w	800546e <_dtoa_r+0x4c6>
 8005326:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800532a:	f1ca 0600 	rsb	r6, sl, #0
 800532e:	4ba0      	ldr	r3, [pc, #640]	; (80055b0 <_dtoa_r+0x608>)
 8005330:	f006 020f 	and.w	r2, r6, #15
 8005334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fb f8cc 	bl	80004d8 <__aeabi_dmul>
 8005340:	2502      	movs	r5, #2
 8005342:	2300      	movs	r3, #0
 8005344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005348:	4f9a      	ldr	r7, [pc, #616]	; (80055b4 <_dtoa_r+0x60c>)
 800534a:	1136      	asrs	r6, r6, #4
 800534c:	2e00      	cmp	r6, #0
 800534e:	f040 8083 	bne.w	8005458 <_dtoa_r+0x4b0>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e0      	bne.n	8005318 <_dtoa_r+0x370>
 8005356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 808a 	beq.w	8005472 <_dtoa_r+0x4ca>
 800535e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005362:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800536a:	2200      	movs	r2, #0
 800536c:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <_dtoa_r+0x610>)
 800536e:	f7fb fb25 	bl	80009bc <__aeabi_dcmplt>
 8005372:	2800      	cmp	r0, #0
 8005374:	d07d      	beq.n	8005472 <_dtoa_r+0x4ca>
 8005376:	f1b8 0f00 	cmp.w	r8, #0
 800537a:	d07a      	beq.n	8005472 <_dtoa_r+0x4ca>
 800537c:	9b04      	ldr	r3, [sp, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	dd36      	ble.n	80053f0 <_dtoa_r+0x448>
 8005382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005386:	2200      	movs	r2, #0
 8005388:	4b8c      	ldr	r3, [pc, #560]	; (80055bc <_dtoa_r+0x614>)
 800538a:	f7fb f8a5 	bl	80004d8 <__aeabi_dmul>
 800538e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005392:	9e04      	ldr	r6, [sp, #16]
 8005394:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005398:	3501      	adds	r5, #1
 800539a:	4628      	mov	r0, r5
 800539c:	f7fb f832 	bl	8000404 <__aeabi_i2d>
 80053a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053a4:	f7fb f898 	bl	80004d8 <__aeabi_dmul>
 80053a8:	2200      	movs	r2, #0
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <_dtoa_r+0x618>)
 80053ac:	f7fa fede 	bl	800016c <__adddf3>
 80053b0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80053b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80053b8:	950b      	str	r5, [sp, #44]	; 0x2c
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	d15c      	bne.n	8005478 <_dtoa_r+0x4d0>
 80053be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <_dtoa_r+0x61c>)
 80053c6:	f7fa fecf 	bl	8000168 <__aeabi_dsub>
 80053ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053cc:	462b      	mov	r3, r5
 80053ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d2:	f7fb fb11 	bl	80009f8 <__aeabi_dcmpgt>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f040 8281 	bne.w	80058de <_dtoa_r+0x936>
 80053dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80053e6:	f7fb fae9 	bl	80009bc <__aeabi_dcmplt>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f040 8275 	bne.w	80058da <_dtoa_r+0x932>
 80053f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80053f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f2c0 814b 	blt.w	8005696 <_dtoa_r+0x6ee>
 8005400:	f1ba 0f0e 	cmp.w	sl, #14
 8005404:	f300 8147 	bgt.w	8005696 <_dtoa_r+0x6ee>
 8005408:	4b69      	ldr	r3, [pc, #420]	; (80055b0 <_dtoa_r+0x608>)
 800540a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005416:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005418:	2b00      	cmp	r3, #0
 800541a:	f280 80d7 	bge.w	80055cc <_dtoa_r+0x624>
 800541e:	f1b8 0f00 	cmp.w	r8, #0
 8005422:	f300 80d3 	bgt.w	80055cc <_dtoa_r+0x624>
 8005426:	f040 8257 	bne.w	80058d8 <_dtoa_r+0x930>
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	2200      	movs	r2, #0
 8005430:	4b64      	ldr	r3, [pc, #400]	; (80055c4 <_dtoa_r+0x61c>)
 8005432:	f7fb f851 	bl	80004d8 <__aeabi_dmul>
 8005436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800543a:	f7fb fad3 	bl	80009e4 <__aeabi_dcmpge>
 800543e:	4646      	mov	r6, r8
 8005440:	4647      	mov	r7, r8
 8005442:	2800      	cmp	r0, #0
 8005444:	f040 822d 	bne.w	80058a2 <_dtoa_r+0x8fa>
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	9a06      	ldr	r2, [sp, #24]
 800544c:	1c5d      	adds	r5, r3, #1
 800544e:	2331      	movs	r3, #49	; 0x31
 8005450:	f10a 0a01 	add.w	sl, sl, #1
 8005454:	7013      	strb	r3, [r2, #0]
 8005456:	e228      	b.n	80058aa <_dtoa_r+0x902>
 8005458:	07f2      	lsls	r2, r6, #31
 800545a:	d505      	bpl.n	8005468 <_dtoa_r+0x4c0>
 800545c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005460:	f7fb f83a 	bl	80004d8 <__aeabi_dmul>
 8005464:	2301      	movs	r3, #1
 8005466:	3501      	adds	r5, #1
 8005468:	1076      	asrs	r6, r6, #1
 800546a:	3708      	adds	r7, #8
 800546c:	e76e      	b.n	800534c <_dtoa_r+0x3a4>
 800546e:	2502      	movs	r5, #2
 8005470:	e771      	b.n	8005356 <_dtoa_r+0x3ae>
 8005472:	4657      	mov	r7, sl
 8005474:	4646      	mov	r6, r8
 8005476:	e790      	b.n	800539a <_dtoa_r+0x3f2>
 8005478:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <_dtoa_r+0x608>)
 800547a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800547e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d048      	beq.n	800551a <_dtoa_r+0x572>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	2000      	movs	r0, #0
 800548e:	494e      	ldr	r1, [pc, #312]	; (80055c8 <_dtoa_r+0x620>)
 8005490:	f7fb f94c 	bl	800072c <__aeabi_ddiv>
 8005494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005498:	f7fa fe66 	bl	8000168 <__aeabi_dsub>
 800549c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054a0:	9d06      	ldr	r5, [sp, #24]
 80054a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a6:	f7fb fac7 	bl	8000a38 <__aeabi_d2iz>
 80054aa:	9011      	str	r0, [sp, #68]	; 0x44
 80054ac:	f7fa ffaa 	bl	8000404 <__aeabi_i2d>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b8:	f7fa fe56 	bl	8000168 <__aeabi_dsub>
 80054bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c2:	3330      	adds	r3, #48	; 0x30
 80054c4:	f805 3b01 	strb.w	r3, [r5], #1
 80054c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054cc:	f7fb fa76 	bl	80009bc <__aeabi_dcmplt>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d163      	bne.n	800559c <_dtoa_r+0x5f4>
 80054d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054d8:	2000      	movs	r0, #0
 80054da:	4937      	ldr	r1, [pc, #220]	; (80055b8 <_dtoa_r+0x610>)
 80054dc:	f7fa fe44 	bl	8000168 <__aeabi_dsub>
 80054e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054e4:	f7fb fa6a 	bl	80009bc <__aeabi_dcmplt>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f040 80b5 	bne.w	8005658 <_dtoa_r+0x6b0>
 80054ee:	9b06      	ldr	r3, [sp, #24]
 80054f0:	1aeb      	subs	r3, r5, r3
 80054f2:	429e      	cmp	r6, r3
 80054f4:	f77f af7c 	ble.w	80053f0 <_dtoa_r+0x448>
 80054f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054fc:	2200      	movs	r2, #0
 80054fe:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <_dtoa_r+0x614>)
 8005500:	f7fa ffea 	bl	80004d8 <__aeabi_dmul>
 8005504:	2200      	movs	r2, #0
 8005506:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800550a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550e:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <_dtoa_r+0x614>)
 8005510:	f7fa ffe2 	bl	80004d8 <__aeabi_dmul>
 8005514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005518:	e7c3      	b.n	80054a2 <_dtoa_r+0x4fa>
 800551a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800551e:	f7fa ffdb 	bl	80004d8 <__aeabi_dmul>
 8005522:	9b06      	ldr	r3, [sp, #24]
 8005524:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005528:	199d      	adds	r5, r3, r6
 800552a:	461e      	mov	r6, r3
 800552c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005530:	f7fb fa82 	bl	8000a38 <__aeabi_d2iz>
 8005534:	9011      	str	r0, [sp, #68]	; 0x44
 8005536:	f7fa ff65 	bl	8000404 <__aeabi_i2d>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005542:	f7fa fe11 	bl	8000168 <__aeabi_dsub>
 8005546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800554c:	3330      	adds	r3, #48	; 0x30
 800554e:	f806 3b01 	strb.w	r3, [r6], #1
 8005552:	42ae      	cmp	r6, r5
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	d124      	bne.n	80055a4 <_dtoa_r+0x5fc>
 800555a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <_dtoa_r+0x620>)
 8005560:	f7fa fe04 	bl	800016c <__adddf3>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800556c:	f7fb fa44 	bl	80009f8 <__aeabi_dcmpgt>
 8005570:	2800      	cmp	r0, #0
 8005572:	d171      	bne.n	8005658 <_dtoa_r+0x6b0>
 8005574:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005578:	2000      	movs	r0, #0
 800557a:	4913      	ldr	r1, [pc, #76]	; (80055c8 <_dtoa_r+0x620>)
 800557c:	f7fa fdf4 	bl	8000168 <__aeabi_dsub>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005588:	f7fb fa18 	bl	80009bc <__aeabi_dcmplt>
 800558c:	2800      	cmp	r0, #0
 800558e:	f43f af2f 	beq.w	80053f0 <_dtoa_r+0x448>
 8005592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005596:	1e6a      	subs	r2, r5, #1
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d001      	beq.n	80055a0 <_dtoa_r+0x5f8>
 800559c:	46ba      	mov	sl, r7
 800559e:	e04a      	b.n	8005636 <_dtoa_r+0x68e>
 80055a0:	4615      	mov	r5, r2
 80055a2:	e7f6      	b.n	8005592 <_dtoa_r+0x5ea>
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <_dtoa_r+0x614>)
 80055a6:	f7fa ff97 	bl	80004d8 <__aeabi_dmul>
 80055aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ae:	e7bd      	b.n	800552c <_dtoa_r+0x584>
 80055b0:	08006708 	.word	0x08006708
 80055b4:	080066e0 	.word	0x080066e0
 80055b8:	3ff00000 	.word	0x3ff00000
 80055bc:	40240000 	.word	0x40240000
 80055c0:	401c0000 	.word	0x401c0000
 80055c4:	40140000 	.word	0x40140000
 80055c8:	3fe00000 	.word	0x3fe00000
 80055cc:	9d06      	ldr	r5, [sp, #24]
 80055ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fb f8a7 	bl	800072c <__aeabi_ddiv>
 80055de:	f7fb fa2b 	bl	8000a38 <__aeabi_d2iz>
 80055e2:	4681      	mov	r9, r0
 80055e4:	f7fa ff0e 	bl	8000404 <__aeabi_i2d>
 80055e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ec:	f7fa ff74 	bl	80004d8 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fa fdb6 	bl	8000168 <__aeabi_dsub>
 80055fc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005600:	f805 6b01 	strb.w	r6, [r5], #1
 8005604:	9e06      	ldr	r6, [sp, #24]
 8005606:	4602      	mov	r2, r0
 8005608:	1bae      	subs	r6, r5, r6
 800560a:	45b0      	cmp	r8, r6
 800560c:	460b      	mov	r3, r1
 800560e:	d135      	bne.n	800567c <_dtoa_r+0x6d4>
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	f7fb f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 8005620:	b9c8      	cbnz	r0, 8005656 <_dtoa_r+0x6ae>
 8005622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005626:	4630      	mov	r0, r6
 8005628:	4639      	mov	r1, r7
 800562a:	f7fb f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800562e:	b110      	cbz	r0, 8005636 <_dtoa_r+0x68e>
 8005630:	f019 0f01 	tst.w	r9, #1
 8005634:	d10f      	bne.n	8005656 <_dtoa_r+0x6ae>
 8005636:	4659      	mov	r1, fp
 8005638:	4620      	mov	r0, r4
 800563a:	f000 facc 	bl	8005bd6 <_Bfree>
 800563e:	2300      	movs	r3, #0
 8005640:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005642:	702b      	strb	r3, [r5, #0]
 8005644:	f10a 0301 	add.w	r3, sl, #1
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564c:	2b00      	cmp	r3, #0
 800564e:	f43f acf3 	beq.w	8005038 <_dtoa_r+0x90>
 8005652:	601d      	str	r5, [r3, #0]
 8005654:	e4f0      	b.n	8005038 <_dtoa_r+0x90>
 8005656:	4657      	mov	r7, sl
 8005658:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800565c:	1e6b      	subs	r3, r5, #1
 800565e:	2a39      	cmp	r2, #57	; 0x39
 8005660:	d106      	bne.n	8005670 <_dtoa_r+0x6c8>
 8005662:	9a06      	ldr	r2, [sp, #24]
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <_dtoa_r+0x6d0>
 8005668:	2330      	movs	r3, #48	; 0x30
 800566a:	7013      	strb	r3, [r2, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	3701      	adds	r7, #1
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	3201      	adds	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e791      	b.n	800559c <_dtoa_r+0x5f4>
 8005678:	461d      	mov	r5, r3
 800567a:	e7ed      	b.n	8005658 <_dtoa_r+0x6b0>
 800567c:	2200      	movs	r2, #0
 800567e:	4b99      	ldr	r3, [pc, #612]	; (80058e4 <_dtoa_r+0x93c>)
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	2200      	movs	r2, #0
 8005686:	2300      	movs	r3, #0
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	f7fb f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8005690:	2800      	cmp	r0, #0
 8005692:	d09e      	beq.n	80055d2 <_dtoa_r+0x62a>
 8005694:	e7cf      	b.n	8005636 <_dtoa_r+0x68e>
 8005696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005698:	2a00      	cmp	r2, #0
 800569a:	f000 8088 	beq.w	80057ae <_dtoa_r+0x806>
 800569e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056a0:	2a01      	cmp	r2, #1
 80056a2:	dc6d      	bgt.n	8005780 <_dtoa_r+0x7d8>
 80056a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d066      	beq.n	8005778 <_dtoa_r+0x7d0>
 80056aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056ae:	464d      	mov	r5, r9
 80056b0:	9e08      	ldr	r6, [sp, #32]
 80056b2:	9a07      	ldr	r2, [sp, #28]
 80056b4:	2101      	movs	r1, #1
 80056b6:	441a      	add	r2, r3
 80056b8:	4620      	mov	r0, r4
 80056ba:	4499      	add	r9, r3
 80056bc:	9207      	str	r2, [sp, #28]
 80056be:	f000 fb2a 	bl	8005d16 <__i2b>
 80056c2:	4607      	mov	r7, r0
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	dd0b      	ble.n	80056e0 <_dtoa_r+0x738>
 80056c8:	9b07      	ldr	r3, [sp, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd08      	ble.n	80056e0 <_dtoa_r+0x738>
 80056ce:	42ab      	cmp	r3, r5
 80056d0:	bfa8      	it	ge
 80056d2:	462b      	movge	r3, r5
 80056d4:	9a07      	ldr	r2, [sp, #28]
 80056d6:	eba9 0903 	sub.w	r9, r9, r3
 80056da:	1aed      	subs	r5, r5, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	9307      	str	r3, [sp, #28]
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	b1eb      	cbz	r3, 8005720 <_dtoa_r+0x778>
 80056e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d065      	beq.n	80057b6 <_dtoa_r+0x80e>
 80056ea:	b18e      	cbz	r6, 8005710 <_dtoa_r+0x768>
 80056ec:	4639      	mov	r1, r7
 80056ee:	4632      	mov	r2, r6
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fbaf 	bl	8005e54 <__pow5mult>
 80056f6:	465a      	mov	r2, fp
 80056f8:	4601      	mov	r1, r0
 80056fa:	4607      	mov	r7, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fb13 	bl	8005d28 <__multiply>
 8005702:	4659      	mov	r1, fp
 8005704:	900a      	str	r0, [sp, #40]	; 0x28
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fa65 	bl	8005bd6 <_Bfree>
 800570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570e:	469b      	mov	fp, r3
 8005710:	9b08      	ldr	r3, [sp, #32]
 8005712:	1b9a      	subs	r2, r3, r6
 8005714:	d004      	beq.n	8005720 <_dtoa_r+0x778>
 8005716:	4659      	mov	r1, fp
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fb9b 	bl	8005e54 <__pow5mult>
 800571e:	4683      	mov	fp, r0
 8005720:	2101      	movs	r1, #1
 8005722:	4620      	mov	r0, r4
 8005724:	f000 faf7 	bl	8005d16 <__i2b>
 8005728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572a:	4606      	mov	r6, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 81c6 	beq.w	8005abe <_dtoa_r+0xb16>
 8005732:	461a      	mov	r2, r3
 8005734:	4601      	mov	r1, r0
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fb8c 	bl	8005e54 <__pow5mult>
 800573c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800573e:	4606      	mov	r6, r0
 8005740:	2b01      	cmp	r3, #1
 8005742:	dc3e      	bgt.n	80057c2 <_dtoa_r+0x81a>
 8005744:	9b02      	ldr	r3, [sp, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d137      	bne.n	80057ba <_dtoa_r+0x812>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005750:	2b00      	cmp	r3, #0
 8005752:	d134      	bne.n	80057be <_dtoa_r+0x816>
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800575a:	0d1b      	lsrs	r3, r3, #20
 800575c:	051b      	lsls	r3, r3, #20
 800575e:	b12b      	cbz	r3, 800576c <_dtoa_r+0x7c4>
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	f109 0901 	add.w	r9, r9, #1
 8005766:	3301      	adds	r3, #1
 8005768:	9307      	str	r3, [sp, #28]
 800576a:	2301      	movs	r3, #1
 800576c:	9308      	str	r3, [sp, #32]
 800576e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005770:	2b00      	cmp	r3, #0
 8005772:	d128      	bne.n	80057c6 <_dtoa_r+0x81e>
 8005774:	2001      	movs	r0, #1
 8005776:	e02e      	b.n	80057d6 <_dtoa_r+0x82e>
 8005778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800577a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800577e:	e796      	b.n	80056ae <_dtoa_r+0x706>
 8005780:	9b08      	ldr	r3, [sp, #32]
 8005782:	f108 36ff 	add.w	r6, r8, #4294967295
 8005786:	42b3      	cmp	r3, r6
 8005788:	bfb7      	itett	lt
 800578a:	9b08      	ldrlt	r3, [sp, #32]
 800578c:	1b9e      	subge	r6, r3, r6
 800578e:	1af2      	sublt	r2, r6, r3
 8005790:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005792:	bfbf      	itttt	lt
 8005794:	9608      	strlt	r6, [sp, #32]
 8005796:	189b      	addlt	r3, r3, r2
 8005798:	930c      	strlt	r3, [sp, #48]	; 0x30
 800579a:	2600      	movlt	r6, #0
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	bfb9      	ittee	lt
 80057a2:	eba9 0508 	sublt.w	r5, r9, r8
 80057a6:	2300      	movlt	r3, #0
 80057a8:	464d      	movge	r5, r9
 80057aa:	4643      	movge	r3, r8
 80057ac:	e781      	b.n	80056b2 <_dtoa_r+0x70a>
 80057ae:	9e08      	ldr	r6, [sp, #32]
 80057b0:	464d      	mov	r5, r9
 80057b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057b4:	e786      	b.n	80056c4 <_dtoa_r+0x71c>
 80057b6:	9a08      	ldr	r2, [sp, #32]
 80057b8:	e7ad      	b.n	8005716 <_dtoa_r+0x76e>
 80057ba:	2300      	movs	r3, #0
 80057bc:	e7d6      	b.n	800576c <_dtoa_r+0x7c4>
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	e7d4      	b.n	800576c <_dtoa_r+0x7c4>
 80057c2:	2300      	movs	r3, #0
 80057c4:	9308      	str	r3, [sp, #32]
 80057c6:	6933      	ldr	r3, [r6, #16]
 80057c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057cc:	6918      	ldr	r0, [r3, #16]
 80057ce:	f000 fa54 	bl	8005c7a <__hi0bits>
 80057d2:	f1c0 0020 	rsb	r0, r0, #32
 80057d6:	9b07      	ldr	r3, [sp, #28]
 80057d8:	4418      	add	r0, r3
 80057da:	f010 001f 	ands.w	r0, r0, #31
 80057de:	d047      	beq.n	8005870 <_dtoa_r+0x8c8>
 80057e0:	f1c0 0320 	rsb	r3, r0, #32
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	dd3b      	ble.n	8005860 <_dtoa_r+0x8b8>
 80057e8:	9b07      	ldr	r3, [sp, #28]
 80057ea:	f1c0 001c 	rsb	r0, r0, #28
 80057ee:	4481      	add	r9, r0
 80057f0:	4405      	add	r5, r0
 80057f2:	4403      	add	r3, r0
 80057f4:	9307      	str	r3, [sp, #28]
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
 80057fa:	dd05      	ble.n	8005808 <_dtoa_r+0x860>
 80057fc:	4659      	mov	r1, fp
 80057fe:	464a      	mov	r2, r9
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fb75 	bl	8005ef0 <__lshift>
 8005806:	4683      	mov	fp, r0
 8005808:	9b07      	ldr	r3, [sp, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dd05      	ble.n	800581a <_dtoa_r+0x872>
 800580e:	4631      	mov	r1, r6
 8005810:	461a      	mov	r2, r3
 8005812:	4620      	mov	r0, r4
 8005814:	f000 fb6c 	bl	8005ef0 <__lshift>
 8005818:	4606      	mov	r6, r0
 800581a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581c:	b353      	cbz	r3, 8005874 <_dtoa_r+0x8cc>
 800581e:	4631      	mov	r1, r6
 8005820:	4658      	mov	r0, fp
 8005822:	f000 fbb9 	bl	8005f98 <__mcmp>
 8005826:	2800      	cmp	r0, #0
 8005828:	da24      	bge.n	8005874 <_dtoa_r+0x8cc>
 800582a:	2300      	movs	r3, #0
 800582c:	4659      	mov	r1, fp
 800582e:	220a      	movs	r2, #10
 8005830:	4620      	mov	r0, r4
 8005832:	f000 f9e7 	bl	8005c04 <__multadd>
 8005836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005838:	f10a 3aff 	add.w	sl, sl, #4294967295
 800583c:	4683      	mov	fp, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8144 	beq.w	8005acc <_dtoa_r+0xb24>
 8005844:	2300      	movs	r3, #0
 8005846:	4639      	mov	r1, r7
 8005848:	220a      	movs	r2, #10
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f9da 	bl	8005c04 <__multadd>
 8005850:	9b04      	ldr	r3, [sp, #16]
 8005852:	4607      	mov	r7, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc4d      	bgt.n	80058f4 <_dtoa_r+0x94c>
 8005858:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800585a:	2b02      	cmp	r3, #2
 800585c:	dd4a      	ble.n	80058f4 <_dtoa_r+0x94c>
 800585e:	e011      	b.n	8005884 <_dtoa_r+0x8dc>
 8005860:	d0c9      	beq.n	80057f6 <_dtoa_r+0x84e>
 8005862:	9a07      	ldr	r2, [sp, #28]
 8005864:	331c      	adds	r3, #28
 8005866:	441a      	add	r2, r3
 8005868:	4499      	add	r9, r3
 800586a:	441d      	add	r5, r3
 800586c:	4613      	mov	r3, r2
 800586e:	e7c1      	b.n	80057f4 <_dtoa_r+0x84c>
 8005870:	4603      	mov	r3, r0
 8005872:	e7f6      	b.n	8005862 <_dtoa_r+0x8ba>
 8005874:	f1b8 0f00 	cmp.w	r8, #0
 8005878:	dc36      	bgt.n	80058e8 <_dtoa_r+0x940>
 800587a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800587c:	2b02      	cmp	r3, #2
 800587e:	dd33      	ble.n	80058e8 <_dtoa_r+0x940>
 8005880:	f8cd 8010 	str.w	r8, [sp, #16]
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	b963      	cbnz	r3, 80058a2 <_dtoa_r+0x8fa>
 8005888:	4631      	mov	r1, r6
 800588a:	2205      	movs	r2, #5
 800588c:	4620      	mov	r0, r4
 800588e:	f000 f9b9 	bl	8005c04 <__multadd>
 8005892:	4601      	mov	r1, r0
 8005894:	4606      	mov	r6, r0
 8005896:	4658      	mov	r0, fp
 8005898:	f000 fb7e 	bl	8005f98 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	f73f add3 	bgt.w	8005448 <_dtoa_r+0x4a0>
 80058a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058a4:	9d06      	ldr	r5, [sp, #24]
 80058a6:	ea6f 0a03 	mvn.w	sl, r3
 80058aa:	f04f 0900 	mov.w	r9, #0
 80058ae:	4631      	mov	r1, r6
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 f990 	bl	8005bd6 <_Bfree>
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	f43f aebd 	beq.w	8005636 <_dtoa_r+0x68e>
 80058bc:	f1b9 0f00 	cmp.w	r9, #0
 80058c0:	d005      	beq.n	80058ce <_dtoa_r+0x926>
 80058c2:	45b9      	cmp	r9, r7
 80058c4:	d003      	beq.n	80058ce <_dtoa_r+0x926>
 80058c6:	4649      	mov	r1, r9
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 f984 	bl	8005bd6 <_Bfree>
 80058ce:	4639      	mov	r1, r7
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 f980 	bl	8005bd6 <_Bfree>
 80058d6:	e6ae      	b.n	8005636 <_dtoa_r+0x68e>
 80058d8:	2600      	movs	r6, #0
 80058da:	4637      	mov	r7, r6
 80058dc:	e7e1      	b.n	80058a2 <_dtoa_r+0x8fa>
 80058de:	46ba      	mov	sl, r7
 80058e0:	4637      	mov	r7, r6
 80058e2:	e5b1      	b.n	8005448 <_dtoa_r+0x4a0>
 80058e4:	40240000 	.word	0x40240000
 80058e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80f3 	beq.w	8005ada <_dtoa_r+0xb32>
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	dd05      	ble.n	8005904 <_dtoa_r+0x95c>
 80058f8:	4639      	mov	r1, r7
 80058fa:	462a      	mov	r2, r5
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 faf7 	bl	8005ef0 <__lshift>
 8005902:	4607      	mov	r7, r0
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04c      	beq.n	80059a4 <_dtoa_r+0x9fc>
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f92e 	bl	8005b6e <_Balloc>
 8005912:	4605      	mov	r5, r0
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	f107 010c 	add.w	r1, r7, #12
 800591a:	3202      	adds	r2, #2
 800591c:	0092      	lsls	r2, r2, #2
 800591e:	300c      	adds	r0, #12
 8005920:	f000 f91a 	bl	8005b58 <memcpy>
 8005924:	2201      	movs	r2, #1
 8005926:	4629      	mov	r1, r5
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fae1 	bl	8005ef0 <__lshift>
 800592e:	46b9      	mov	r9, r7
 8005930:	4607      	mov	r7, r0
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	9b02      	ldr	r3, [sp, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	9308      	str	r3, [sp, #32]
 800593e:	4631      	mov	r1, r6
 8005940:	4658      	mov	r0, fp
 8005942:	f7ff faa1 	bl	8004e88 <quorem>
 8005946:	4649      	mov	r1, r9
 8005948:	4605      	mov	r5, r0
 800594a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800594e:	4658      	mov	r0, fp
 8005950:	f000 fb22 	bl	8005f98 <__mcmp>
 8005954:	463a      	mov	r2, r7
 8005956:	9002      	str	r0, [sp, #8]
 8005958:	4631      	mov	r1, r6
 800595a:	4620      	mov	r0, r4
 800595c:	f000 fb36 	bl	8005fcc <__mdiff>
 8005960:	68c3      	ldr	r3, [r0, #12]
 8005962:	4602      	mov	r2, r0
 8005964:	bb03      	cbnz	r3, 80059a8 <_dtoa_r+0xa00>
 8005966:	4601      	mov	r1, r0
 8005968:	9009      	str	r0, [sp, #36]	; 0x24
 800596a:	4658      	mov	r0, fp
 800596c:	f000 fb14 	bl	8005f98 <__mcmp>
 8005970:	4603      	mov	r3, r0
 8005972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005974:	4611      	mov	r1, r2
 8005976:	4620      	mov	r0, r4
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	f000 f92c 	bl	8005bd6 <_Bfree>
 800597e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005980:	b9a3      	cbnz	r3, 80059ac <_dtoa_r+0xa04>
 8005982:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005984:	b992      	cbnz	r2, 80059ac <_dtoa_r+0xa04>
 8005986:	9a08      	ldr	r2, [sp, #32]
 8005988:	b982      	cbnz	r2, 80059ac <_dtoa_r+0xa04>
 800598a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800598e:	d029      	beq.n	80059e4 <_dtoa_r+0xa3c>
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd01      	ble.n	800599a <_dtoa_r+0x9f2>
 8005996:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800599a:	9b07      	ldr	r3, [sp, #28]
 800599c:	1c5d      	adds	r5, r3, #1
 800599e:	f883 8000 	strb.w	r8, [r3]
 80059a2:	e784      	b.n	80058ae <_dtoa_r+0x906>
 80059a4:	4638      	mov	r0, r7
 80059a6:	e7c2      	b.n	800592e <_dtoa_r+0x986>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7e3      	b.n	8005974 <_dtoa_r+0x9cc>
 80059ac:	9a02      	ldr	r2, [sp, #8]
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	db04      	blt.n	80059bc <_dtoa_r+0xa14>
 80059b2:	d123      	bne.n	80059fc <_dtoa_r+0xa54>
 80059b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059b6:	bb0a      	cbnz	r2, 80059fc <_dtoa_r+0xa54>
 80059b8:	9a08      	ldr	r2, [sp, #32]
 80059ba:	b9fa      	cbnz	r2, 80059fc <_dtoa_r+0xa54>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	ddec      	ble.n	800599a <_dtoa_r+0x9f2>
 80059c0:	4659      	mov	r1, fp
 80059c2:	2201      	movs	r2, #1
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 fa93 	bl	8005ef0 <__lshift>
 80059ca:	4631      	mov	r1, r6
 80059cc:	4683      	mov	fp, r0
 80059ce:	f000 fae3 	bl	8005f98 <__mcmp>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	dc03      	bgt.n	80059de <_dtoa_r+0xa36>
 80059d6:	d1e0      	bne.n	800599a <_dtoa_r+0x9f2>
 80059d8:	f018 0f01 	tst.w	r8, #1
 80059dc:	d0dd      	beq.n	800599a <_dtoa_r+0x9f2>
 80059de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059e2:	d1d8      	bne.n	8005996 <_dtoa_r+0x9ee>
 80059e4:	9b07      	ldr	r3, [sp, #28]
 80059e6:	9a07      	ldr	r2, [sp, #28]
 80059e8:	1c5d      	adds	r5, r3, #1
 80059ea:	2339      	movs	r3, #57	; 0x39
 80059ec:	7013      	strb	r3, [r2, #0]
 80059ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059f2:	1e6a      	subs	r2, r5, #1
 80059f4:	2b39      	cmp	r3, #57	; 0x39
 80059f6:	d04d      	beq.n	8005a94 <_dtoa_r+0xaec>
 80059f8:	3301      	adds	r3, #1
 80059fa:	e052      	b.n	8005aa2 <_dtoa_r+0xafa>
 80059fc:	9a07      	ldr	r2, [sp, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f102 0501 	add.w	r5, r2, #1
 8005a04:	dd06      	ble.n	8005a14 <_dtoa_r+0xa6c>
 8005a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a0a:	d0eb      	beq.n	80059e4 <_dtoa_r+0xa3c>
 8005a0c:	f108 0801 	add.w	r8, r8, #1
 8005a10:	9b07      	ldr	r3, [sp, #28]
 8005a12:	e7c4      	b.n	800599e <_dtoa_r+0x9f6>
 8005a14:	9b06      	ldr	r3, [sp, #24]
 8005a16:	9a04      	ldr	r2, [sp, #16]
 8005a18:	1aeb      	subs	r3, r5, r3
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005a20:	d021      	beq.n	8005a66 <_dtoa_r+0xabe>
 8005a22:	4659      	mov	r1, fp
 8005a24:	2300      	movs	r3, #0
 8005a26:	220a      	movs	r2, #10
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f8eb 	bl	8005c04 <__multadd>
 8005a2e:	45b9      	cmp	r9, r7
 8005a30:	4683      	mov	fp, r0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	f04f 020a 	mov.w	r2, #10
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	d105      	bne.n	8005a4c <_dtoa_r+0xaa4>
 8005a40:	f000 f8e0 	bl	8005c04 <__multadd>
 8005a44:	4681      	mov	r9, r0
 8005a46:	4607      	mov	r7, r0
 8005a48:	9507      	str	r5, [sp, #28]
 8005a4a:	e778      	b.n	800593e <_dtoa_r+0x996>
 8005a4c:	f000 f8da 	bl	8005c04 <__multadd>
 8005a50:	4639      	mov	r1, r7
 8005a52:	4681      	mov	r9, r0
 8005a54:	2300      	movs	r3, #0
 8005a56:	220a      	movs	r2, #10
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f8d3 	bl	8005c04 <__multadd>
 8005a5e:	4607      	mov	r7, r0
 8005a60:	e7f2      	b.n	8005a48 <_dtoa_r+0xaa0>
 8005a62:	f04f 0900 	mov.w	r9, #0
 8005a66:	4659      	mov	r1, fp
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fa40 	bl	8005ef0 <__lshift>
 8005a70:	4631      	mov	r1, r6
 8005a72:	4683      	mov	fp, r0
 8005a74:	f000 fa90 	bl	8005f98 <__mcmp>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	dcb8      	bgt.n	80059ee <_dtoa_r+0xa46>
 8005a7c:	d102      	bne.n	8005a84 <_dtoa_r+0xadc>
 8005a7e:	f018 0f01 	tst.w	r8, #1
 8005a82:	d1b4      	bne.n	80059ee <_dtoa_r+0xa46>
 8005a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a88:	1e6a      	subs	r2, r5, #1
 8005a8a:	2b30      	cmp	r3, #48	; 0x30
 8005a8c:	f47f af0f 	bne.w	80058ae <_dtoa_r+0x906>
 8005a90:	4615      	mov	r5, r2
 8005a92:	e7f7      	b.n	8005a84 <_dtoa_r+0xadc>
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d105      	bne.n	8005aa6 <_dtoa_r+0xafe>
 8005a9a:	2331      	movs	r3, #49	; 0x31
 8005a9c:	9a06      	ldr	r2, [sp, #24]
 8005a9e:	f10a 0a01 	add.w	sl, sl, #1
 8005aa2:	7013      	strb	r3, [r2, #0]
 8005aa4:	e703      	b.n	80058ae <_dtoa_r+0x906>
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7a1      	b.n	80059ee <_dtoa_r+0xa46>
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <_dtoa_r+0xb60>)
 8005aac:	f7ff bae1 	b.w	8005072 <_dtoa_r+0xca>
 8005ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f47f aabb 	bne.w	800502e <_dtoa_r+0x86>
 8005ab8:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <_dtoa_r+0xb64>)
 8005aba:	f7ff bada 	b.w	8005072 <_dtoa_r+0xca>
 8005abe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f77f ae3f 	ble.w	8005744 <_dtoa_r+0x79c>
 8005ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ac8:	9308      	str	r3, [sp, #32]
 8005aca:	e653      	b.n	8005774 <_dtoa_r+0x7cc>
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	dc03      	bgt.n	8005ada <_dtoa_r+0xb32>
 8005ad2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	f73f aed5 	bgt.w	8005884 <_dtoa_r+0x8dc>
 8005ada:	9d06      	ldr	r5, [sp, #24]
 8005adc:	4631      	mov	r1, r6
 8005ade:	4658      	mov	r0, fp
 8005ae0:	f7ff f9d2 	bl	8004e88 <quorem>
 8005ae4:	9b06      	ldr	r3, [sp, #24]
 8005ae6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005aea:	f805 8b01 	strb.w	r8, [r5], #1
 8005aee:	9a04      	ldr	r2, [sp, #16]
 8005af0:	1aeb      	subs	r3, r5, r3
 8005af2:	429a      	cmp	r2, r3
 8005af4:	ddb5      	ble.n	8005a62 <_dtoa_r+0xaba>
 8005af6:	4659      	mov	r1, fp
 8005af8:	2300      	movs	r3, #0
 8005afa:	220a      	movs	r2, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 f881 	bl	8005c04 <__multadd>
 8005b02:	4683      	mov	fp, r0
 8005b04:	e7ea      	b.n	8005adc <_dtoa_r+0xb34>
 8005b06:	bf00      	nop
 8005b08:	080066a8 	.word	0x080066a8
 8005b0c:	080066cc 	.word	0x080066cc

08005b10 <_localeconv_r>:
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <_localeconv_r+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a18      	ldr	r0, [r3, #32]
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <_localeconv_r+0x18>)
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	bf08      	it	eq
 8005b1c:	4618      	moveq	r0, r3
 8005b1e:	30f0      	adds	r0, #240	; 0xf0
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	2000000c 	.word	0x2000000c
 8005b28:	20000070 	.word	0x20000070

08005b2c <malloc>:
 8005b2c:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <malloc+0xc>)
 8005b2e:	4601      	mov	r1, r0
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	f000 bb53 	b.w	80061dc <_malloc_r>
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c

08005b3c <memchr>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	b2c9      	uxtb	r1, r1
 8005b40:	4402      	add	r2, r0
 8005b42:	4290      	cmp	r0, r2
 8005b44:	4603      	mov	r3, r0
 8005b46:	d101      	bne.n	8005b4c <memchr+0x10>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e003      	b.n	8005b54 <memchr+0x18>
 8005b4c:	781c      	ldrb	r4, [r3, #0]
 8005b4e:	3001      	adds	r0, #1
 8005b50:	428c      	cmp	r4, r1
 8005b52:	d1f6      	bne.n	8005b42 <memchr+0x6>
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <memcpy>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	1e43      	subs	r3, r0, #1
 8005b5c:	440a      	add	r2, r1
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d100      	bne.n	8005b64 <memcpy+0xc>
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6c:	e7f7      	b.n	8005b5e <memcpy+0x6>

08005b6e <_Balloc>:
 8005b6e:	b570      	push	{r4, r5, r6, lr}
 8005b70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b72:	4604      	mov	r4, r0
 8005b74:	460e      	mov	r6, r1
 8005b76:	b93d      	cbnz	r5, 8005b88 <_Balloc+0x1a>
 8005b78:	2010      	movs	r0, #16
 8005b7a:	f7ff ffd7 	bl	8005b2c <malloc>
 8005b7e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b84:	6005      	str	r5, [r0, #0]
 8005b86:	60c5      	str	r5, [r0, #12]
 8005b88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b8a:	68eb      	ldr	r3, [r5, #12]
 8005b8c:	b183      	cbz	r3, 8005bb0 <_Balloc+0x42>
 8005b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b96:	b9b8      	cbnz	r0, 8005bc8 <_Balloc+0x5a>
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f506 	lsl.w	r5, r1, r6
 8005b9e:	1d6a      	adds	r2, r5, #5
 8005ba0:	0092      	lsls	r2, r2, #2
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 fabf 	bl	8006126 <_calloc_r>
 8005ba8:	b160      	cbz	r0, 8005bc4 <_Balloc+0x56>
 8005baa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005bae:	e00e      	b.n	8005bce <_Balloc+0x60>
 8005bb0:	2221      	movs	r2, #33	; 0x21
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 fab6 	bl	8006126 <_calloc_r>
 8005bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bbc:	60e8      	str	r0, [r5, #12]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e4      	bne.n	8005b8e <_Balloc+0x20>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bd4:	e7f7      	b.n	8005bc6 <_Balloc+0x58>

08005bd6 <_Bfree>:
 8005bd6:	b570      	push	{r4, r5, r6, lr}
 8005bd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	b93c      	cbnz	r4, 8005bf0 <_Bfree+0x1a>
 8005be0:	2010      	movs	r0, #16
 8005be2:	f7ff ffa3 	bl	8005b2c <malloc>
 8005be6:	6270      	str	r0, [r6, #36]	; 0x24
 8005be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bec:	6004      	str	r4, [r0, #0]
 8005bee:	60c4      	str	r4, [r0, #12]
 8005bf0:	b13d      	cbz	r5, 8005c02 <_Bfree+0x2c>
 8005bf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bf4:	686a      	ldr	r2, [r5, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bfc:	6029      	str	r1, [r5, #0]
 8005bfe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005c02:	bd70      	pop	{r4, r5, r6, pc}

08005c04 <__multadd>:
 8005c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	461f      	mov	r7, r3
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	2300      	movs	r3, #0
 8005c10:	690d      	ldr	r5, [r1, #16]
 8005c12:	f101 0c14 	add.w	ip, r1, #20
 8005c16:	f8dc 0000 	ldr.w	r0, [ip]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	b281      	uxth	r1, r0
 8005c1e:	fb02 7101 	mla	r1, r2, r1, r7
 8005c22:	0c00      	lsrs	r0, r0, #16
 8005c24:	0c0f      	lsrs	r7, r1, #16
 8005c26:	fb02 7000 	mla	r0, r2, r0, r7
 8005c2a:	b289      	uxth	r1, r1
 8005c2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c30:	429d      	cmp	r5, r3
 8005c32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c36:	f84c 1b04 	str.w	r1, [ip], #4
 8005c3a:	dcec      	bgt.n	8005c16 <__multadd+0x12>
 8005c3c:	b1d7      	cbz	r7, 8005c74 <__multadd+0x70>
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	dc12      	bgt.n	8005c6a <__multadd+0x66>
 8005c44:	6861      	ldr	r1, [r4, #4]
 8005c46:	4630      	mov	r0, r6
 8005c48:	3101      	adds	r1, #1
 8005c4a:	f7ff ff90 	bl	8005b6e <_Balloc>
 8005c4e:	4680      	mov	r8, r0
 8005c50:	6922      	ldr	r2, [r4, #16]
 8005c52:	f104 010c 	add.w	r1, r4, #12
 8005c56:	3202      	adds	r2, #2
 8005c58:	0092      	lsls	r2, r2, #2
 8005c5a:	300c      	adds	r0, #12
 8005c5c:	f7ff ff7c 	bl	8005b58 <memcpy>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ffb7 	bl	8005bd6 <_Bfree>
 8005c68:	4644      	mov	r4, r8
 8005c6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c6e:	3501      	adds	r5, #1
 8005c70:	615f      	str	r7, [r3, #20]
 8005c72:	6125      	str	r5, [r4, #16]
 8005c74:	4620      	mov	r0, r4
 8005c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c7a <__hi0bits>:
 8005c7a:	0c02      	lsrs	r2, r0, #16
 8005c7c:	0412      	lsls	r2, r2, #16
 8005c7e:	4603      	mov	r3, r0
 8005c80:	b9b2      	cbnz	r2, 8005cb0 <__hi0bits+0x36>
 8005c82:	0403      	lsls	r3, r0, #16
 8005c84:	2010      	movs	r0, #16
 8005c86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c8a:	bf04      	itt	eq
 8005c8c:	021b      	lsleq	r3, r3, #8
 8005c8e:	3008      	addeq	r0, #8
 8005c90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c94:	bf04      	itt	eq
 8005c96:	011b      	lsleq	r3, r3, #4
 8005c98:	3004      	addeq	r0, #4
 8005c9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c9e:	bf04      	itt	eq
 8005ca0:	009b      	lsleq	r3, r3, #2
 8005ca2:	3002      	addeq	r0, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	db06      	blt.n	8005cb6 <__hi0bits+0x3c>
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	d503      	bpl.n	8005cb4 <__hi0bits+0x3a>
 8005cac:	3001      	adds	r0, #1
 8005cae:	4770      	bx	lr
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e7e8      	b.n	8005c86 <__hi0bits+0xc>
 8005cb4:	2020      	movs	r0, #32
 8005cb6:	4770      	bx	lr

08005cb8 <__lo0bits>:
 8005cb8:	6803      	ldr	r3, [r0, #0]
 8005cba:	4601      	mov	r1, r0
 8005cbc:	f013 0207 	ands.w	r2, r3, #7
 8005cc0:	d00b      	beq.n	8005cda <__lo0bits+0x22>
 8005cc2:	07da      	lsls	r2, r3, #31
 8005cc4:	d423      	bmi.n	8005d0e <__lo0bits+0x56>
 8005cc6:	0798      	lsls	r0, r3, #30
 8005cc8:	bf49      	itett	mi
 8005cca:	085b      	lsrmi	r3, r3, #1
 8005ccc:	089b      	lsrpl	r3, r3, #2
 8005cce:	2001      	movmi	r0, #1
 8005cd0:	600b      	strmi	r3, [r1, #0]
 8005cd2:	bf5c      	itt	pl
 8005cd4:	600b      	strpl	r3, [r1, #0]
 8005cd6:	2002      	movpl	r0, #2
 8005cd8:	4770      	bx	lr
 8005cda:	b298      	uxth	r0, r3
 8005cdc:	b9a8      	cbnz	r0, 8005d0a <__lo0bits+0x52>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ce6:	bf04      	itt	eq
 8005ce8:	0a1b      	lsreq	r3, r3, #8
 8005cea:	3008      	addeq	r0, #8
 8005cec:	071a      	lsls	r2, r3, #28
 8005cee:	bf04      	itt	eq
 8005cf0:	091b      	lsreq	r3, r3, #4
 8005cf2:	3004      	addeq	r0, #4
 8005cf4:	079a      	lsls	r2, r3, #30
 8005cf6:	bf04      	itt	eq
 8005cf8:	089b      	lsreq	r3, r3, #2
 8005cfa:	3002      	addeq	r0, #2
 8005cfc:	07da      	lsls	r2, r3, #31
 8005cfe:	d402      	bmi.n	8005d06 <__lo0bits+0x4e>
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	d006      	beq.n	8005d12 <__lo0bits+0x5a>
 8005d04:	3001      	adds	r0, #1
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	e7e9      	b.n	8005ce2 <__lo0bits+0x2a>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	4770      	bx	lr
 8005d12:	2020      	movs	r0, #32
 8005d14:	4770      	bx	lr

08005d16 <__i2b>:
 8005d16:	b510      	push	{r4, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	f7ff ff27 	bl	8005b6e <_Balloc>
 8005d20:	2201      	movs	r2, #1
 8005d22:	6144      	str	r4, [r0, #20]
 8005d24:	6102      	str	r2, [r0, #16]
 8005d26:	bd10      	pop	{r4, pc}

08005d28 <__multiply>:
 8005d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	690a      	ldr	r2, [r1, #16]
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	4688      	mov	r8, r1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	bfbe      	ittt	lt
 8005d38:	460b      	movlt	r3, r1
 8005d3a:	46a0      	movlt	r8, r4
 8005d3c:	461c      	movlt	r4, r3
 8005d3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d4e:	eb07 0609 	add.w	r6, r7, r9
 8005d52:	42b3      	cmp	r3, r6
 8005d54:	bfb8      	it	lt
 8005d56:	3101      	addlt	r1, #1
 8005d58:	f7ff ff09 	bl	8005b6e <_Balloc>
 8005d5c:	f100 0514 	add.w	r5, r0, #20
 8005d60:	462b      	mov	r3, r5
 8005d62:	2200      	movs	r2, #0
 8005d64:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005d68:	4573      	cmp	r3, lr
 8005d6a:	d316      	bcc.n	8005d9a <__multiply+0x72>
 8005d6c:	f104 0214 	add.w	r2, r4, #20
 8005d70:	f108 0114 	add.w	r1, r8, #20
 8005d74:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	9b00      	ldr	r3, [sp, #0]
 8005d80:	9201      	str	r2, [sp, #4]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d80c      	bhi.n	8005da0 <__multiply+0x78>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	dd03      	ble.n	8005d92 <__multiply+0x6a>
 8005d8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05d      	beq.n	8005e4e <__multiply+0x126>
 8005d92:	6106      	str	r6, [r0, #16]
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	f843 2b04 	str.w	r2, [r3], #4
 8005d9e:	e7e3      	b.n	8005d68 <__multiply+0x40>
 8005da0:	f8b2 b000 	ldrh.w	fp, [r2]
 8005da4:	f1bb 0f00 	cmp.w	fp, #0
 8005da8:	d023      	beq.n	8005df2 <__multiply+0xca>
 8005daa:	4689      	mov	r9, r1
 8005dac:	46ac      	mov	ip, r5
 8005dae:	f04f 0800 	mov.w	r8, #0
 8005db2:	f859 4b04 	ldr.w	r4, [r9], #4
 8005db6:	f8dc a000 	ldr.w	sl, [ip]
 8005dba:	b2a3      	uxth	r3, r4
 8005dbc:	fa1f fa8a 	uxth.w	sl, sl
 8005dc0:	fb0b a303 	mla	r3, fp, r3, sl
 8005dc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005dc8:	f8dc 4000 	ldr.w	r4, [ip]
 8005dcc:	4443      	add	r3, r8
 8005dce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005dd2:	fb0b 840a 	mla	r4, fp, sl, r8
 8005dd6:	46e2      	mov	sl, ip
 8005dd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005de2:	454f      	cmp	r7, r9
 8005de4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005de8:	f84a 3b04 	str.w	r3, [sl], #4
 8005dec:	d82b      	bhi.n	8005e46 <__multiply+0x11e>
 8005dee:	f8cc 8004 	str.w	r8, [ip, #4]
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	3204      	adds	r2, #4
 8005df6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005dfa:	f1ba 0f00 	cmp.w	sl, #0
 8005dfe:	d020      	beq.n	8005e42 <__multiply+0x11a>
 8005e00:	4689      	mov	r9, r1
 8005e02:	46a8      	mov	r8, r5
 8005e04:	f04f 0b00 	mov.w	fp, #0
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e0e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e18:	46c4      	mov	ip, r8
 8005e1a:	445c      	add	r4, fp
 8005e1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e20:	f84c 3b04 	str.w	r3, [ip], #4
 8005e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e28:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	fb0a b303 	mla	r3, sl, r3, fp
 8005e32:	454f      	cmp	r7, r9
 8005e34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e38:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e3c:	d805      	bhi.n	8005e4a <__multiply+0x122>
 8005e3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e42:	3504      	adds	r5, #4
 8005e44:	e79b      	b.n	8005d7e <__multiply+0x56>
 8005e46:	46d4      	mov	ip, sl
 8005e48:	e7b3      	b.n	8005db2 <__multiply+0x8a>
 8005e4a:	46e0      	mov	r8, ip
 8005e4c:	e7dd      	b.n	8005e0a <__multiply+0xe2>
 8005e4e:	3e01      	subs	r6, #1
 8005e50:	e799      	b.n	8005d86 <__multiply+0x5e>
	...

08005e54 <__pow5mult>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	4615      	mov	r5, r2
 8005e5a:	f012 0203 	ands.w	r2, r2, #3
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460f      	mov	r7, r1
 8005e62:	d007      	beq.n	8005e74 <__pow5mult+0x20>
 8005e64:	4c21      	ldr	r4, [pc, #132]	; (8005eec <__pow5mult+0x98>)
 8005e66:	3a01      	subs	r2, #1
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e6e:	f7ff fec9 	bl	8005c04 <__multadd>
 8005e72:	4607      	mov	r7, r0
 8005e74:	10ad      	asrs	r5, r5, #2
 8005e76:	d035      	beq.n	8005ee4 <__pow5mult+0x90>
 8005e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e7a:	b93c      	cbnz	r4, 8005e8c <__pow5mult+0x38>
 8005e7c:	2010      	movs	r0, #16
 8005e7e:	f7ff fe55 	bl	8005b2c <malloc>
 8005e82:	6270      	str	r0, [r6, #36]	; 0x24
 8005e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e88:	6004      	str	r4, [r0, #0]
 8005e8a:	60c4      	str	r4, [r0, #12]
 8005e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e94:	b94c      	cbnz	r4, 8005eaa <__pow5mult+0x56>
 8005e96:	f240 2171 	movw	r1, #625	; 0x271
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ff3b 	bl	8005d16 <__i2b>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	07eb      	lsls	r3, r5, #31
 8005eb0:	d50a      	bpl.n	8005ec8 <__pow5mult+0x74>
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ff36 	bl	8005d28 <__multiply>
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff fe88 	bl	8005bd6 <_Bfree>
 8005ec6:	464f      	mov	r7, r9
 8005ec8:	106d      	asrs	r5, r5, #1
 8005eca:	d00b      	beq.n	8005ee4 <__pow5mult+0x90>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	b938      	cbnz	r0, 8005ee0 <__pow5mult+0x8c>
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f7ff ff27 	bl	8005d28 <__multiply>
 8005eda:	6020      	str	r0, [r4, #0]
 8005edc:	f8c0 8000 	str.w	r8, [r0]
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	e7e4      	b.n	8005eae <__pow5mult+0x5a>
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eea:	bf00      	nop
 8005eec:	080067d0 	.word	0x080067d0

08005ef0 <__lshift>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	4616      	mov	r6, r2
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f00:	eb0a 0903 	add.w	r9, sl, r3
 8005f04:	6849      	ldr	r1, [r1, #4]
 8005f06:	68a3      	ldr	r3, [r4, #8]
 8005f08:	f109 0501 	add.w	r5, r9, #1
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	db32      	blt.n	8005f76 <__lshift+0x86>
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7ff fe2c 	bl	8005b6e <_Balloc>
 8005f16:	2300      	movs	r3, #0
 8005f18:	4680      	mov	r8, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f100 0114 	add.w	r1, r0, #20
 8005f20:	4553      	cmp	r3, sl
 8005f22:	db2b      	blt.n	8005f7c <__lshift+0x8c>
 8005f24:	6920      	ldr	r0, [r4, #16]
 8005f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f2a:	f104 0314 	add.w	r3, r4, #20
 8005f2e:	f016 021f 	ands.w	r2, r6, #31
 8005f32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f3a:	d025      	beq.n	8005f88 <__lshift+0x98>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f1c2 0e20 	rsb	lr, r2, #32
 8005f42:	468a      	mov	sl, r1
 8005f44:	681e      	ldr	r6, [r3, #0]
 8005f46:	4096      	lsls	r6, r2
 8005f48:	4330      	orrs	r0, r6
 8005f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f52:	459c      	cmp	ip, r3
 8005f54:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f58:	d814      	bhi.n	8005f84 <__lshift+0x94>
 8005f5a:	6048      	str	r0, [r1, #4]
 8005f5c:	b108      	cbz	r0, 8005f62 <__lshift+0x72>
 8005f5e:	f109 0502 	add.w	r5, r9, #2
 8005f62:	3d01      	subs	r5, #1
 8005f64:	4638      	mov	r0, r7
 8005f66:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	f7ff fe33 	bl	8005bd6 <_Bfree>
 8005f70:	4640      	mov	r0, r8
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	3101      	adds	r1, #1
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	e7c7      	b.n	8005f0c <__lshift+0x1c>
 8005f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f80:	3301      	adds	r3, #1
 8005f82:	e7cd      	b.n	8005f20 <__lshift+0x30>
 8005f84:	4651      	mov	r1, sl
 8005f86:	e7dc      	b.n	8005f42 <__lshift+0x52>
 8005f88:	3904      	subs	r1, #4
 8005f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8e:	459c      	cmp	ip, r3
 8005f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f94:	d8f9      	bhi.n	8005f8a <__lshift+0x9a>
 8005f96:	e7e4      	b.n	8005f62 <__lshift+0x72>

08005f98 <__mcmp>:
 8005f98:	6903      	ldr	r3, [r0, #16]
 8005f9a:	690a      	ldr	r2, [r1, #16]
 8005f9c:	b530      	push	{r4, r5, lr}
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <__mcmp+0x24>
 8005fa2:	0092      	lsls	r2, r2, #2
 8005fa4:	3014      	adds	r0, #20
 8005fa6:	3114      	adds	r1, #20
 8005fa8:	1884      	adds	r4, r0, r2
 8005faa:	4411      	add	r1, r2
 8005fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fb4:	4295      	cmp	r5, r2
 8005fb6:	d003      	beq.n	8005fc0 <__mcmp+0x28>
 8005fb8:	d305      	bcc.n	8005fc6 <__mcmp+0x2e>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd30      	pop	{r4, r5, pc}
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d3f3      	bcc.n	8005fac <__mcmp+0x14>
 8005fc4:	e7fa      	b.n	8005fbc <__mcmp+0x24>
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	e7f7      	b.n	8005fbc <__mcmp+0x24>

08005fcc <__mdiff>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4614      	mov	r4, r2
 8005fda:	f7ff ffdd 	bl	8005f98 <__mcmp>
 8005fde:	1e06      	subs	r6, r0, #0
 8005fe0:	d108      	bne.n	8005ff4 <__mdiff+0x28>
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff fdc2 	bl	8005b6e <_Balloc>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	bfa4      	itt	ge
 8005ff6:	4623      	movge	r3, r4
 8005ff8:	462c      	movge	r4, r5
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	bfa6      	itte	ge
 8006000:	461d      	movge	r5, r3
 8006002:	2600      	movge	r6, #0
 8006004:	2601      	movlt	r6, #1
 8006006:	f7ff fdb2 	bl	8005b6e <_Balloc>
 800600a:	f04f 0e00 	mov.w	lr, #0
 800600e:	60c6      	str	r6, [r0, #12]
 8006010:	692b      	ldr	r3, [r5, #16]
 8006012:	6926      	ldr	r6, [r4, #16]
 8006014:	f104 0214 	add.w	r2, r4, #20
 8006018:	f105 0914 	add.w	r9, r5, #20
 800601c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006020:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006024:	f100 0114 	add.w	r1, r0, #20
 8006028:	f852 ab04 	ldr.w	sl, [r2], #4
 800602c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006030:	fa1f f38a 	uxth.w	r3, sl
 8006034:	4473      	add	r3, lr
 8006036:	b2ac      	uxth	r4, r5
 8006038:	1b1b      	subs	r3, r3, r4
 800603a:	0c2c      	lsrs	r4, r5, #16
 800603c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006040:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006044:	b29b      	uxth	r3, r3
 8006046:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800604a:	45c8      	cmp	r8, r9
 800604c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006050:	4694      	mov	ip, r2
 8006052:	f841 4b04 	str.w	r4, [r1], #4
 8006056:	d8e7      	bhi.n	8006028 <__mdiff+0x5c>
 8006058:	45bc      	cmp	ip, r7
 800605a:	d304      	bcc.n	8006066 <__mdiff+0x9a>
 800605c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006060:	b183      	cbz	r3, 8006084 <__mdiff+0xb8>
 8006062:	6106      	str	r6, [r0, #16]
 8006064:	e7c4      	b.n	8005ff0 <__mdiff+0x24>
 8006066:	f85c 4b04 	ldr.w	r4, [ip], #4
 800606a:	b2a2      	uxth	r2, r4
 800606c:	4472      	add	r2, lr
 800606e:	1413      	asrs	r3, r2, #16
 8006070:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006074:	b292      	uxth	r2, r2
 8006076:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800607a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800607e:	f841 2b04 	str.w	r2, [r1], #4
 8006082:	e7e9      	b.n	8006058 <__mdiff+0x8c>
 8006084:	3e01      	subs	r6, #1
 8006086:	e7e9      	b.n	800605c <__mdiff+0x90>

08006088 <__d2b>:
 8006088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800608c:	461c      	mov	r4, r3
 800608e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006092:	2101      	movs	r1, #1
 8006094:	4690      	mov	r8, r2
 8006096:	f7ff fd6a 	bl	8005b6e <_Balloc>
 800609a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800609e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80060a2:	4607      	mov	r7, r0
 80060a4:	bb34      	cbnz	r4, 80060f4 <__d2b+0x6c>
 80060a6:	9201      	str	r2, [sp, #4]
 80060a8:	f1b8 0200 	subs.w	r2, r8, #0
 80060ac:	d027      	beq.n	80060fe <__d2b+0x76>
 80060ae:	a802      	add	r0, sp, #8
 80060b0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80060b4:	f7ff fe00 	bl	8005cb8 <__lo0bits>
 80060b8:	9900      	ldr	r1, [sp, #0]
 80060ba:	b1f0      	cbz	r0, 80060fa <__d2b+0x72>
 80060bc:	9a01      	ldr	r2, [sp, #4]
 80060be:	f1c0 0320 	rsb	r3, r0, #32
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	430b      	orrs	r3, r1
 80060c8:	40c2      	lsrs	r2, r0
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	9201      	str	r2, [sp, #4]
 80060ce:	9b01      	ldr	r3, [sp, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf14      	ite	ne
 80060d4:	2102      	movne	r1, #2
 80060d6:	2101      	moveq	r1, #1
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	6139      	str	r1, [r7, #16]
 80060dc:	b1c4      	cbz	r4, 8006110 <__d2b+0x88>
 80060de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060e2:	4404      	add	r4, r0
 80060e4:	6034      	str	r4, [r6, #0]
 80060e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ea:	6028      	str	r0, [r5, #0]
 80060ec:	4638      	mov	r0, r7
 80060ee:	b002      	add	sp, #8
 80060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060f8:	e7d5      	b.n	80060a6 <__d2b+0x1e>
 80060fa:	6179      	str	r1, [r7, #20]
 80060fc:	e7e7      	b.n	80060ce <__d2b+0x46>
 80060fe:	a801      	add	r0, sp, #4
 8006100:	f7ff fdda 	bl	8005cb8 <__lo0bits>
 8006104:	2101      	movs	r1, #1
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	6139      	str	r1, [r7, #16]
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	3020      	adds	r0, #32
 800610e:	e7e5      	b.n	80060dc <__d2b+0x54>
 8006110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006114:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	6918      	ldr	r0, [r3, #16]
 800611c:	f7ff fdad 	bl	8005c7a <__hi0bits>
 8006120:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006124:	e7e1      	b.n	80060ea <__d2b+0x62>

08006126 <_calloc_r>:
 8006126:	b538      	push	{r3, r4, r5, lr}
 8006128:	fb02 f401 	mul.w	r4, r2, r1
 800612c:	4621      	mov	r1, r4
 800612e:	f000 f855 	bl	80061dc <_malloc_r>
 8006132:	4605      	mov	r5, r0
 8006134:	b118      	cbz	r0, 800613e <_calloc_r+0x18>
 8006136:	4622      	mov	r2, r4
 8006138:	2100      	movs	r1, #0
 800613a:	f7fe fa2d 	bl	8004598 <memset>
 800613e:	4628      	mov	r0, r5
 8006140:	bd38      	pop	{r3, r4, r5, pc}
	...

08006144 <_free_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4605      	mov	r5, r0
 8006148:	2900      	cmp	r1, #0
 800614a:	d043      	beq.n	80061d4 <_free_r+0x90>
 800614c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006150:	1f0c      	subs	r4, r1, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfb8      	it	lt
 8006156:	18e4      	addlt	r4, r4, r3
 8006158:	f000 fa27 	bl	80065aa <__malloc_lock>
 800615c:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <_free_r+0x94>)
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	4610      	mov	r0, r2
 8006162:	b933      	cbnz	r3, 8006172 <_free_r+0x2e>
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6014      	str	r4, [r2, #0]
 8006168:	4628      	mov	r0, r5
 800616a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800616e:	f000 ba1d 	b.w	80065ac <__malloc_unlock>
 8006172:	42a3      	cmp	r3, r4
 8006174:	d90b      	bls.n	800618e <_free_r+0x4a>
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	1862      	adds	r2, r4, r1
 800617a:	4293      	cmp	r3, r2
 800617c:	bf01      	itttt	eq
 800617e:	681a      	ldreq	r2, [r3, #0]
 8006180:	685b      	ldreq	r3, [r3, #4]
 8006182:	1852      	addeq	r2, r2, r1
 8006184:	6022      	streq	r2, [r4, #0]
 8006186:	6063      	str	r3, [r4, #4]
 8006188:	6004      	str	r4, [r0, #0]
 800618a:	e7ed      	b.n	8006168 <_free_r+0x24>
 800618c:	4613      	mov	r3, r2
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	b10a      	cbz	r2, 8006196 <_free_r+0x52>
 8006192:	42a2      	cmp	r2, r4
 8006194:	d9fa      	bls.n	800618c <_free_r+0x48>
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	1858      	adds	r0, r3, r1
 800619a:	42a0      	cmp	r0, r4
 800619c:	d10b      	bne.n	80061b6 <_free_r+0x72>
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	4401      	add	r1, r0
 80061a2:	1858      	adds	r0, r3, r1
 80061a4:	4282      	cmp	r2, r0
 80061a6:	6019      	str	r1, [r3, #0]
 80061a8:	d1de      	bne.n	8006168 <_free_r+0x24>
 80061aa:	6810      	ldr	r0, [r2, #0]
 80061ac:	6852      	ldr	r2, [r2, #4]
 80061ae:	4401      	add	r1, r0
 80061b0:	6019      	str	r1, [r3, #0]
 80061b2:	605a      	str	r2, [r3, #4]
 80061b4:	e7d8      	b.n	8006168 <_free_r+0x24>
 80061b6:	d902      	bls.n	80061be <_free_r+0x7a>
 80061b8:	230c      	movs	r3, #12
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	e7d4      	b.n	8006168 <_free_r+0x24>
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1821      	adds	r1, r4, r0
 80061c2:	428a      	cmp	r2, r1
 80061c4:	bf01      	itttt	eq
 80061c6:	6811      	ldreq	r1, [r2, #0]
 80061c8:	6852      	ldreq	r2, [r2, #4]
 80061ca:	1809      	addeq	r1, r1, r0
 80061cc:	6021      	streq	r1, [r4, #0]
 80061ce:	6062      	str	r2, [r4, #4]
 80061d0:	605c      	str	r4, [r3, #4]
 80061d2:	e7c9      	b.n	8006168 <_free_r+0x24>
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	20000204 	.word	0x20000204

080061dc <_malloc_r>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	1ccd      	adds	r5, r1, #3
 80061e0:	f025 0503 	bic.w	r5, r5, #3
 80061e4:	3508      	adds	r5, #8
 80061e6:	2d0c      	cmp	r5, #12
 80061e8:	bf38      	it	cc
 80061ea:	250c      	movcc	r5, #12
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	4606      	mov	r6, r0
 80061f0:	db01      	blt.n	80061f6 <_malloc_r+0x1a>
 80061f2:	42a9      	cmp	r1, r5
 80061f4:	d903      	bls.n	80061fe <_malloc_r+0x22>
 80061f6:	230c      	movs	r3, #12
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	2000      	movs	r0, #0
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	f000 f9d4 	bl	80065aa <__malloc_lock>
 8006202:	4a21      	ldr	r2, [pc, #132]	; (8006288 <_malloc_r+0xac>)
 8006204:	6814      	ldr	r4, [r2, #0]
 8006206:	4621      	mov	r1, r4
 8006208:	b991      	cbnz	r1, 8006230 <_malloc_r+0x54>
 800620a:	4c20      	ldr	r4, [pc, #128]	; (800628c <_malloc_r+0xb0>)
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	b91b      	cbnz	r3, 8006218 <_malloc_r+0x3c>
 8006210:	4630      	mov	r0, r6
 8006212:	f000 f98f 	bl	8006534 <_sbrk_r>
 8006216:	6020      	str	r0, [r4, #0]
 8006218:	4629      	mov	r1, r5
 800621a:	4630      	mov	r0, r6
 800621c:	f000 f98a 	bl	8006534 <_sbrk_r>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d124      	bne.n	800626e <_malloc_r+0x92>
 8006224:	230c      	movs	r3, #12
 8006226:	4630      	mov	r0, r6
 8006228:	6033      	str	r3, [r6, #0]
 800622a:	f000 f9bf 	bl	80065ac <__malloc_unlock>
 800622e:	e7e4      	b.n	80061fa <_malloc_r+0x1e>
 8006230:	680b      	ldr	r3, [r1, #0]
 8006232:	1b5b      	subs	r3, r3, r5
 8006234:	d418      	bmi.n	8006268 <_malloc_r+0x8c>
 8006236:	2b0b      	cmp	r3, #11
 8006238:	d90f      	bls.n	800625a <_malloc_r+0x7e>
 800623a:	600b      	str	r3, [r1, #0]
 800623c:	18cc      	adds	r4, r1, r3
 800623e:	50cd      	str	r5, [r1, r3]
 8006240:	4630      	mov	r0, r6
 8006242:	f000 f9b3 	bl	80065ac <__malloc_unlock>
 8006246:	f104 000b 	add.w	r0, r4, #11
 800624a:	1d23      	adds	r3, r4, #4
 800624c:	f020 0007 	bic.w	r0, r0, #7
 8006250:	1ac3      	subs	r3, r0, r3
 8006252:	d0d3      	beq.n	80061fc <_malloc_r+0x20>
 8006254:	425a      	negs	r2, r3
 8006256:	50e2      	str	r2, [r4, r3]
 8006258:	e7d0      	b.n	80061fc <_malloc_r+0x20>
 800625a:	684b      	ldr	r3, [r1, #4]
 800625c:	428c      	cmp	r4, r1
 800625e:	bf16      	itet	ne
 8006260:	6063      	strne	r3, [r4, #4]
 8006262:	6013      	streq	r3, [r2, #0]
 8006264:	460c      	movne	r4, r1
 8006266:	e7eb      	b.n	8006240 <_malloc_r+0x64>
 8006268:	460c      	mov	r4, r1
 800626a:	6849      	ldr	r1, [r1, #4]
 800626c:	e7cc      	b.n	8006208 <_malloc_r+0x2c>
 800626e:	1cc4      	adds	r4, r0, #3
 8006270:	f024 0403 	bic.w	r4, r4, #3
 8006274:	42a0      	cmp	r0, r4
 8006276:	d005      	beq.n	8006284 <_malloc_r+0xa8>
 8006278:	1a21      	subs	r1, r4, r0
 800627a:	4630      	mov	r0, r6
 800627c:	f000 f95a 	bl	8006534 <_sbrk_r>
 8006280:	3001      	adds	r0, #1
 8006282:	d0cf      	beq.n	8006224 <_malloc_r+0x48>
 8006284:	6025      	str	r5, [r4, #0]
 8006286:	e7db      	b.n	8006240 <_malloc_r+0x64>
 8006288:	20000204 	.word	0x20000204
 800628c:	20000208 	.word	0x20000208

08006290 <__ssputs_r>:
 8006290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	688e      	ldr	r6, [r1, #8]
 8006296:	4682      	mov	sl, r0
 8006298:	429e      	cmp	r6, r3
 800629a:	460c      	mov	r4, r1
 800629c:	4690      	mov	r8, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	d837      	bhi.n	8006312 <__ssputs_r+0x82>
 80062a2:	898a      	ldrh	r2, [r1, #12]
 80062a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062a8:	d031      	beq.n	800630e <__ssputs_r+0x7e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	6825      	ldr	r5, [r4, #0]
 80062ae:	6909      	ldr	r1, [r1, #16]
 80062b0:	1a6f      	subs	r7, r5, r1
 80062b2:	6965      	ldr	r5, [r4, #20]
 80062b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80062bc:	f109 0301 	add.w	r3, r9, #1
 80062c0:	443b      	add	r3, r7
 80062c2:	429d      	cmp	r5, r3
 80062c4:	bf38      	it	cc
 80062c6:	461d      	movcc	r5, r3
 80062c8:	0553      	lsls	r3, r2, #21
 80062ca:	d530      	bpl.n	800632e <__ssputs_r+0x9e>
 80062cc:	4629      	mov	r1, r5
 80062ce:	f7ff ff85 	bl	80061dc <_malloc_r>
 80062d2:	4606      	mov	r6, r0
 80062d4:	b950      	cbnz	r0, 80062ec <__ssputs_r+0x5c>
 80062d6:	230c      	movs	r3, #12
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	f8ca 3000 	str.w	r3, [sl]
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ec:	463a      	mov	r2, r7
 80062ee:	6921      	ldr	r1, [r4, #16]
 80062f0:	f7ff fc32 	bl	8005b58 <memcpy>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	6126      	str	r6, [r4, #16]
 8006302:	443e      	add	r6, r7
 8006304:	6026      	str	r6, [r4, #0]
 8006306:	464e      	mov	r6, r9
 8006308:	6165      	str	r5, [r4, #20]
 800630a:	1bed      	subs	r5, r5, r7
 800630c:	60a5      	str	r5, [r4, #8]
 800630e:	454e      	cmp	r6, r9
 8006310:	d900      	bls.n	8006314 <__ssputs_r+0x84>
 8006312:	464e      	mov	r6, r9
 8006314:	4632      	mov	r2, r6
 8006316:	4641      	mov	r1, r8
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	f000 f92d 	bl	8006578 <memmove>
 800631e:	68a3      	ldr	r3, [r4, #8]
 8006320:	2000      	movs	r0, #0
 8006322:	1b9b      	subs	r3, r3, r6
 8006324:	60a3      	str	r3, [r4, #8]
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	441e      	add	r6, r3
 800632a:	6026      	str	r6, [r4, #0]
 800632c:	e7dc      	b.n	80062e8 <__ssputs_r+0x58>
 800632e:	462a      	mov	r2, r5
 8006330:	f000 f93d 	bl	80065ae <_realloc_r>
 8006334:	4606      	mov	r6, r0
 8006336:	2800      	cmp	r0, #0
 8006338:	d1e2      	bne.n	8006300 <__ssputs_r+0x70>
 800633a:	6921      	ldr	r1, [r4, #16]
 800633c:	4650      	mov	r0, sl
 800633e:	f7ff ff01 	bl	8006144 <_free_r>
 8006342:	e7c8      	b.n	80062d6 <__ssputs_r+0x46>

08006344 <_svfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	461d      	mov	r5, r3
 800634a:	898b      	ldrh	r3, [r1, #12]
 800634c:	b09d      	sub	sp, #116	; 0x74
 800634e:	061f      	lsls	r7, r3, #24
 8006350:	4680      	mov	r8, r0
 8006352:	460c      	mov	r4, r1
 8006354:	4616      	mov	r6, r2
 8006356:	d50f      	bpl.n	8006378 <_svfiprintf_r+0x34>
 8006358:	690b      	ldr	r3, [r1, #16]
 800635a:	b96b      	cbnz	r3, 8006378 <_svfiprintf_r+0x34>
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	f7ff ff3d 	bl	80061dc <_malloc_r>
 8006362:	6020      	str	r0, [r4, #0]
 8006364:	6120      	str	r0, [r4, #16]
 8006366:	b928      	cbnz	r0, 8006374 <_svfiprintf_r+0x30>
 8006368:	230c      	movs	r3, #12
 800636a:	f8c8 3000 	str.w	r3, [r8]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	e0c8      	b.n	8006506 <_svfiprintf_r+0x1c2>
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	6163      	str	r3, [r4, #20]
 8006378:	2300      	movs	r3, #0
 800637a:	9309      	str	r3, [sp, #36]	; 0x24
 800637c:	2320      	movs	r3, #32
 800637e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006382:	2330      	movs	r3, #48	; 0x30
 8006384:	f04f 0b01 	mov.w	fp, #1
 8006388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800638c:	9503      	str	r5, [sp, #12]
 800638e:	4637      	mov	r7, r6
 8006390:	463d      	mov	r5, r7
 8006392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006396:	b10b      	cbz	r3, 800639c <_svfiprintf_r+0x58>
 8006398:	2b25      	cmp	r3, #37	; 0x25
 800639a:	d13e      	bne.n	800641a <_svfiprintf_r+0xd6>
 800639c:	ebb7 0a06 	subs.w	sl, r7, r6
 80063a0:	d00b      	beq.n	80063ba <_svfiprintf_r+0x76>
 80063a2:	4653      	mov	r3, sl
 80063a4:	4632      	mov	r2, r6
 80063a6:	4621      	mov	r1, r4
 80063a8:	4640      	mov	r0, r8
 80063aa:	f7ff ff71 	bl	8006290 <__ssputs_r>
 80063ae:	3001      	adds	r0, #1
 80063b0:	f000 80a4 	beq.w	80064fc <_svfiprintf_r+0x1b8>
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	4453      	add	r3, sl
 80063b8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ba:	783b      	ldrb	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 809d 	beq.w	80064fc <_svfiprintf_r+0x1b8>
 80063c2:	2300      	movs	r3, #0
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063d4:	931a      	str	r3, [sp, #104]	; 0x68
 80063d6:	462f      	mov	r7, r5
 80063d8:	2205      	movs	r2, #5
 80063da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80063de:	4850      	ldr	r0, [pc, #320]	; (8006520 <_svfiprintf_r+0x1dc>)
 80063e0:	f7ff fbac 	bl	8005b3c <memchr>
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	b9d0      	cbnz	r0, 800641e <_svfiprintf_r+0xda>
 80063e8:	06d9      	lsls	r1, r3, #27
 80063ea:	bf44      	itt	mi
 80063ec:	2220      	movmi	r2, #32
 80063ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063f2:	071a      	lsls	r2, r3, #28
 80063f4:	bf44      	itt	mi
 80063f6:	222b      	movmi	r2, #43	; 0x2b
 80063f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063fc:	782a      	ldrb	r2, [r5, #0]
 80063fe:	2a2a      	cmp	r2, #42	; 0x2a
 8006400:	d015      	beq.n	800642e <_svfiprintf_r+0xea>
 8006402:	462f      	mov	r7, r5
 8006404:	2000      	movs	r0, #0
 8006406:	250a      	movs	r5, #10
 8006408:	9a07      	ldr	r2, [sp, #28]
 800640a:	4639      	mov	r1, r7
 800640c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006410:	3b30      	subs	r3, #48	; 0x30
 8006412:	2b09      	cmp	r3, #9
 8006414:	d94d      	bls.n	80064b2 <_svfiprintf_r+0x16e>
 8006416:	b1b8      	cbz	r0, 8006448 <_svfiprintf_r+0x104>
 8006418:	e00f      	b.n	800643a <_svfiprintf_r+0xf6>
 800641a:	462f      	mov	r7, r5
 800641c:	e7b8      	b.n	8006390 <_svfiprintf_r+0x4c>
 800641e:	4a40      	ldr	r2, [pc, #256]	; (8006520 <_svfiprintf_r+0x1dc>)
 8006420:	463d      	mov	r5, r7
 8006422:	1a80      	subs	r0, r0, r2
 8006424:	fa0b f000 	lsl.w	r0, fp, r0
 8006428:	4318      	orrs	r0, r3
 800642a:	9004      	str	r0, [sp, #16]
 800642c:	e7d3      	b.n	80063d6 <_svfiprintf_r+0x92>
 800642e:	9a03      	ldr	r2, [sp, #12]
 8006430:	1d11      	adds	r1, r2, #4
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	9103      	str	r1, [sp, #12]
 8006436:	2a00      	cmp	r2, #0
 8006438:	db01      	blt.n	800643e <_svfiprintf_r+0xfa>
 800643a:	9207      	str	r2, [sp, #28]
 800643c:	e004      	b.n	8006448 <_svfiprintf_r+0x104>
 800643e:	4252      	negs	r2, r2
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	9207      	str	r2, [sp, #28]
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	783b      	ldrb	r3, [r7, #0]
 800644a:	2b2e      	cmp	r3, #46	; 0x2e
 800644c:	d10c      	bne.n	8006468 <_svfiprintf_r+0x124>
 800644e:	787b      	ldrb	r3, [r7, #1]
 8006450:	2b2a      	cmp	r3, #42	; 0x2a
 8006452:	d133      	bne.n	80064bc <_svfiprintf_r+0x178>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	3702      	adds	r7, #2
 8006458:	1d1a      	adds	r2, r3, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	9203      	str	r2, [sp, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	f04f 33ff 	movlt.w	r3, #4294967295
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	4d2e      	ldr	r5, [pc, #184]	; (8006524 <_svfiprintf_r+0x1e0>)
 800646a:	2203      	movs	r2, #3
 800646c:	7839      	ldrb	r1, [r7, #0]
 800646e:	4628      	mov	r0, r5
 8006470:	f7ff fb64 	bl	8005b3c <memchr>
 8006474:	b138      	cbz	r0, 8006486 <_svfiprintf_r+0x142>
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	1b40      	subs	r0, r0, r5
 800647a:	fa03 f000 	lsl.w	r0, r3, r0
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	3701      	adds	r7, #1
 8006482:	4303      	orrs	r3, r0
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	7839      	ldrb	r1, [r7, #0]
 8006488:	2206      	movs	r2, #6
 800648a:	4827      	ldr	r0, [pc, #156]	; (8006528 <_svfiprintf_r+0x1e4>)
 800648c:	1c7e      	adds	r6, r7, #1
 800648e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006492:	f7ff fb53 	bl	8005b3c <memchr>
 8006496:	2800      	cmp	r0, #0
 8006498:	d038      	beq.n	800650c <_svfiprintf_r+0x1c8>
 800649a:	4b24      	ldr	r3, [pc, #144]	; (800652c <_svfiprintf_r+0x1e8>)
 800649c:	bb13      	cbnz	r3, 80064e4 <_svfiprintf_r+0x1a0>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3307      	adds	r3, #7
 80064a2:	f023 0307 	bic.w	r3, r3, #7
 80064a6:	3308      	adds	r3, #8
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	444b      	add	r3, r9
 80064ae:	9309      	str	r3, [sp, #36]	; 0x24
 80064b0:	e76d      	b.n	800638e <_svfiprintf_r+0x4a>
 80064b2:	fb05 3202 	mla	r2, r5, r2, r3
 80064b6:	2001      	movs	r0, #1
 80064b8:	460f      	mov	r7, r1
 80064ba:	e7a6      	b.n	800640a <_svfiprintf_r+0xc6>
 80064bc:	2300      	movs	r3, #0
 80064be:	250a      	movs	r5, #10
 80064c0:	4619      	mov	r1, r3
 80064c2:	3701      	adds	r7, #1
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	4638      	mov	r0, r7
 80064c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064cc:	3a30      	subs	r2, #48	; 0x30
 80064ce:	2a09      	cmp	r2, #9
 80064d0:	d903      	bls.n	80064da <_svfiprintf_r+0x196>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0c8      	beq.n	8006468 <_svfiprintf_r+0x124>
 80064d6:	9105      	str	r1, [sp, #20]
 80064d8:	e7c6      	b.n	8006468 <_svfiprintf_r+0x124>
 80064da:	fb05 2101 	mla	r1, r5, r1, r2
 80064de:	2301      	movs	r3, #1
 80064e0:	4607      	mov	r7, r0
 80064e2:	e7f0      	b.n	80064c6 <_svfiprintf_r+0x182>
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	4622      	mov	r2, r4
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <_svfiprintf_r+0x1ec>)
 80064ec:	a904      	add	r1, sp, #16
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7fe f8ec 	bl	80046cc <_printf_float>
 80064f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064f8:	4681      	mov	r9, r0
 80064fa:	d1d6      	bne.n	80064aa <_svfiprintf_r+0x166>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	065b      	lsls	r3, r3, #25
 8006500:	f53f af35 	bmi.w	800636e <_svfiprintf_r+0x2a>
 8006504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006506:	b01d      	add	sp, #116	; 0x74
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4622      	mov	r2, r4
 8006512:	4b07      	ldr	r3, [pc, #28]	; (8006530 <_svfiprintf_r+0x1ec>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	4640      	mov	r0, r8
 8006518:	f7fe fb84 	bl	8004c24 <_printf_i>
 800651c:	e7ea      	b.n	80064f4 <_svfiprintf_r+0x1b0>
 800651e:	bf00      	nop
 8006520:	080067dc 	.word	0x080067dc
 8006524:	080067e2 	.word	0x080067e2
 8006528:	080067e6 	.word	0x080067e6
 800652c:	080046cd 	.word	0x080046cd
 8006530:	08006291 	.word	0x08006291

08006534 <_sbrk_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	2300      	movs	r3, #0
 8006538:	4c05      	ldr	r4, [pc, #20]	; (8006550 <_sbrk_r+0x1c>)
 800653a:	4605      	mov	r5, r0
 800653c:	4608      	mov	r0, r1
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	f7fd ff7a 	bl	8004438 <_sbrk>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_sbrk_r+0x1a>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	b103      	cbz	r3, 800654e <_sbrk_r+0x1a>
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20000364 	.word	0x20000364

08006554 <__ascii_mbtowc>:
 8006554:	b082      	sub	sp, #8
 8006556:	b901      	cbnz	r1, 800655a <__ascii_mbtowc+0x6>
 8006558:	a901      	add	r1, sp, #4
 800655a:	b142      	cbz	r2, 800656e <__ascii_mbtowc+0x1a>
 800655c:	b14b      	cbz	r3, 8006572 <__ascii_mbtowc+0x1e>
 800655e:	7813      	ldrb	r3, [r2, #0]
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	1c10      	adds	r0, r2, #0
 8006566:	bf18      	it	ne
 8006568:	2001      	movne	r0, #1
 800656a:	b002      	add	sp, #8
 800656c:	4770      	bx	lr
 800656e:	4610      	mov	r0, r2
 8006570:	e7fb      	b.n	800656a <__ascii_mbtowc+0x16>
 8006572:	f06f 0001 	mvn.w	r0, #1
 8006576:	e7f8      	b.n	800656a <__ascii_mbtowc+0x16>

08006578 <memmove>:
 8006578:	4288      	cmp	r0, r1
 800657a:	b510      	push	{r4, lr}
 800657c:	eb01 0302 	add.w	r3, r1, r2
 8006580:	d807      	bhi.n	8006592 <memmove+0x1a>
 8006582:	1e42      	subs	r2, r0, #1
 8006584:	4299      	cmp	r1, r3
 8006586:	d00a      	beq.n	800659e <memmove+0x26>
 8006588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006590:	e7f8      	b.n	8006584 <memmove+0xc>
 8006592:	4283      	cmp	r3, r0
 8006594:	d9f5      	bls.n	8006582 <memmove+0xa>
 8006596:	1881      	adds	r1, r0, r2
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	42d3      	cmn	r3, r2
 800659c:	d100      	bne.n	80065a0 <memmove+0x28>
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065a8:	e7f7      	b.n	800659a <memmove+0x22>

080065aa <__malloc_lock>:
 80065aa:	4770      	bx	lr

080065ac <__malloc_unlock>:
 80065ac:	4770      	bx	lr

080065ae <_realloc_r>:
 80065ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b0:	4607      	mov	r7, r0
 80065b2:	4614      	mov	r4, r2
 80065b4:	460e      	mov	r6, r1
 80065b6:	b921      	cbnz	r1, 80065c2 <_realloc_r+0x14>
 80065b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065bc:	4611      	mov	r1, r2
 80065be:	f7ff be0d 	b.w	80061dc <_malloc_r>
 80065c2:	b922      	cbnz	r2, 80065ce <_realloc_r+0x20>
 80065c4:	f7ff fdbe 	bl	8006144 <_free_r>
 80065c8:	4625      	mov	r5, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ce:	f000 f821 	bl	8006614 <_malloc_usable_size_r>
 80065d2:	42a0      	cmp	r0, r4
 80065d4:	d20f      	bcs.n	80065f6 <_realloc_r+0x48>
 80065d6:	4621      	mov	r1, r4
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff fdff 	bl	80061dc <_malloc_r>
 80065de:	4605      	mov	r5, r0
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0f2      	beq.n	80065ca <_realloc_r+0x1c>
 80065e4:	4631      	mov	r1, r6
 80065e6:	4622      	mov	r2, r4
 80065e8:	f7ff fab6 	bl	8005b58 <memcpy>
 80065ec:	4631      	mov	r1, r6
 80065ee:	4638      	mov	r0, r7
 80065f0:	f7ff fda8 	bl	8006144 <_free_r>
 80065f4:	e7e9      	b.n	80065ca <_realloc_r+0x1c>
 80065f6:	4635      	mov	r5, r6
 80065f8:	e7e7      	b.n	80065ca <_realloc_r+0x1c>

080065fa <__ascii_wctomb>:
 80065fa:	b149      	cbz	r1, 8006610 <__ascii_wctomb+0x16>
 80065fc:	2aff      	cmp	r2, #255	; 0xff
 80065fe:	bf8b      	itete	hi
 8006600:	238a      	movhi	r3, #138	; 0x8a
 8006602:	700a      	strbls	r2, [r1, #0]
 8006604:	6003      	strhi	r3, [r0, #0]
 8006606:	2001      	movls	r0, #1
 8006608:	bf88      	it	hi
 800660a:	f04f 30ff 	movhi.w	r0, #4294967295
 800660e:	4770      	bx	lr
 8006610:	4608      	mov	r0, r1
 8006612:	4770      	bx	lr

08006614 <_malloc_usable_size_r>:
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f18      	subs	r0, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfbc      	itt	lt
 800661e:	580b      	ldrlt	r3, [r1, r0]
 8006620:	18c0      	addlt	r0, r0, r3
 8006622:	4770      	bx	lr

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr
